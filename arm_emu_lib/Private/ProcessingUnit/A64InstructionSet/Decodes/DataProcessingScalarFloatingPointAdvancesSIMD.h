#if !defined(DATAPROCESSINGSCALARFLOATINGPOINTADVANCESSIMD_H_INCLUDED_DDB3C45D_0CAF_4D56_83E9_1B30C58D4A3B)
    #define DATAPROCESSINGSCALARFLOATINGPOINTADVANCESSIMD_H_INCLUDED_DDB3C45D_0CAF_4D56_83E9_1B30C58D4A3B

// Based on C4.1.6 A64 instruction set encoding

    #include <API/Api.h>
    #include <ProcessingUnit/A64InstructionSet/Decodes/DecodeGroup.h>
    #include <Utility/Singleton.h>
    #include <Utility/Utilities.h>
    #include <concepts>
    #include <cstdint>
    #include <numeric>

BEGIN_NAMESPACE

enum class A64DataProcessingScalarFloatingPointAdvancedSIMDGroup : std::uint32_t
{
    CRYPTOGRAPHIC_AES,
    CRYPTOHRAPHIC_THREE_REGISTER_SHA,
    CRYPTOGRAPHIC_TWO_REGISTER_SHA,
    ADVANCED_SIMD_SCALAR_COPY,
    ADVANCED_SIMG_SCALAR_THREE_SAME_FP16,
    ADVANCED_SIMD_SCALAR_TWO_REGISTER_MISCELLANEOUS_FP16,
    ADVANCED_SIMD_SCALAR_THREE_SAME_EXTRACTION,
    ADVANCED_SIMD_SCALAR_TWO_REGISTER_MISCELLANEOUS,
    ADVANCED_SIMD_SCALAR_PAIRWISE,
    ADVANCED_SIMD_SCALAR_THREE_DIFFERENT,
    ADVANCED_SIMD_SCALAR_THREE_SAME,
    ADVANCED_SIMD_SCALAR_SHIFT_BY_IMMEDIATE,
    ADVANCED_SIMD_SCALAR_X_INDEXED_ELEMENT,
    ADVANCED_SIMD_TABLE_LOOKUP,
    ADVANCED_SIMD_PERMUTE,
    ADVANCED_SIMD_EXTRACT,
    ADVANCED_SIMD_COPY,
    ADVANCED_SIMD_THREE_SAME_FP16,
    ADVANCED_SIMD_TWO_REGISTER_MISCELLANEOUS_FP16,
    ADVANCED_SIMD_THREE_REGISTER_EXTENSION,
    ADVANCED_SIMD_TWO_REGISTER_MISCELLANEOUS,
    ADVANCED_SIMD_ACROSS_LANES,
    ADVANCED_SIMD_THREE_DIFFERENT,
    ADVANCED_SIMD_THREE_SAME,
    ADVANCED_SIMD_MODIFIED_IMMEDIATE,
    ADVANCED_SIMD_SHIFT_BY_IMMEDIATE,
    ADVANCED_SIMD_VECTOR_X_INDEXED_ELEMENT,
    CRYPTOGRAPHIC_THREE_REGISTER_IMM2,
    CRYPTOGRAPHIC_THREE_REGISTER_SHA512,
    CRYPTOGRAPHIC_FOUR_REGISTER,
    XAR,
    CRYPTOGRAPHIC_TWO_REGISTER_SHA512,
    CONVERSION_FLOATING_POINT_AND_FIXED_POINT,
    CONVERSION_FLOATING_POINT_AND_INTEGER,
    FLOATING_POINT_DATA_PROCESSING_ONE_SOURCE,
    FLOATING_POINT_COMPARE,
    FLOATING_POINT_IMMEDIATE,
    FLOATING_POINT_CONDITIONAL_COMPARE,
    FLOATING_POINT_DATA_PROCESSING_TWO_SOURCE,
    FLOATING_POINT_CONDITIONAL_SELECT,
    FLOATING_POINT_DATA_PROCESSING_THREE_SOURCE,

    ARM_EMU_COUNT,

    Undefined =
        std::numeric_limits< std::underlying_type_t< A64DataProcessingScalarFloatingPointAdvancedSIMDGroup > >::max(),
};

static constexpr Table< A64DataProcessingScalarFloatingPointAdvancedSIMDGroup,
                        std::underlying_type_t< A64DataProcessingScalarFloatingPointAdvancedSIMDGroup >,
                        enum_size_v< A64DataProcessingScalarFloatingPointAdvancedSIMDGroup > >
    A64DataProcessingScalarFloatingPointAdvancedSIMDGroupTable { { {
        { 0b1111'1111'0011'1110'0000'1100'0000'0000, 0b0100'1110'0010'1000'0000'1000'0000'0000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_AES },
        { 0b1111'1111'0010'0000'1000'1100'0000'0000, 0b0101'1110'0000'0000'0000'0000'0000'0000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOHRAPHIC_THREE_REGISTER_SHA },
        { 0b1111'1111'0011'1110'0000'1100'0000'0000, 0b0101'1110'0010'1000'0000'1000'0000'0000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_TWO_REGISTER_SHA },
        { 0b11011111111000001000010000000000, 0b01011110000000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_COPY },
        { 0b11011111011000001100010000000000, 0b01011110010000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMG_SCALAR_THREE_SAME_FP16 },
        { 0b11011111011111100000110000000000, 0b01011110011110000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_TWO_REGISTER_MISCELLANEOUS_FP16 },
        { 0b11011111001000001000010000000000, 0b01011110000000001000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_THREE_SAME_EXTRACTION },
        { 0b11011111001111100000110000000000, 0b01011110001000000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_TWO_REGISTER_MISCELLANEOUS },
        { 0b11011111001111100000110000000000, 0b01011110001100000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_PAIRWISE },
        { 0b11011111001000000000110000000000, 0b01011110001000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_THREE_DIFFERENT },
        { 0b11011111001000000000010000000000, 0b01011110001000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_THREE_SAME },
        { 0b11011111100000000000010000000000, 0b01011111000000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_SHIFT_BY_IMMEDIATE },
        { 0b11011111000000000000010000000000, 0b01011111000000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_X_INDEXED_ELEMENT },
        { 0b10111111001000001000110000000000, 0b00001110000000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_TABLE_LOOKUP },
        { 0b10111111001000001000110000000000, 0b00001110000000000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_PERMUTE },
        { 0b10111111001000001000010000000000, 0b00101110000000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_EXTRACT },
        { 0b10011111111000001000010000000000, 0b00001110000000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_COPY },
        { 0b10011111011000001100010000000000, 0b00001110010000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_THREE_SAME_FP16 },
        { 0b10011111011111100000110000000000, 0b00001110011110000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_TWO_REGISTER_MISCELLANEOUS_FP16 },
        { 0b10011111001000001000010000000000, 0b00001110000000001000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_THREE_REGISTER_EXTENSION },
        { 0b10011111001111100000110000000000, 0b00001110001000000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_TWO_REGISTER_MISCELLANEOUS },
        { 0b10011111001111100000110000000000, 0b00001110001100000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_ACROSS_LANES },
        { 0b10011111001000000000110000000000, 0b00001110001000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_THREE_DIFFERENT },
        { 0b10011111001000000000010000000000, 0b00001110001000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_THREE_SAME },
        { 0b10011111111110000000010000000000, 0b00001111000000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_MODIFIED_IMMEDIATE },
        { 0b10011111100000000000010000000000, 0b00001111000000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SHIFT_BY_IMMEDIATE },
        { 0b10011111000000000000010000000000, 0b00001111000000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_VECTOR_X_INDEXED_ELEMENT },
        { 0b11111111111000001100000000000000, 0b11001110010000001000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_THREE_REGISTER_IMM2 },
        { 0b11111111111000001011000000000000, 0b11001110011000001000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_THREE_REGISTER_SHA512 },
        { 0b11111111100000001000000000000000, 0b11001110000000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_FOUR_REGISTER },
        { 0b11111111111000000000000000000000, 0b11001110100000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::XAR },
        { 0b11111111111111111111000000000000, 0b11001110110000001000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_TWO_REGISTER_SHA512 },
        { 0b01011111001000000000000000000000, 0b00011110000000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CONVERSION_FLOATING_POINT_AND_FIXED_POINT },
        { 0b01011111001000001111110000000000, 0b00011110001000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CONVERSION_FLOATING_POINT_AND_INTEGER },
        { 0b01011111001000000111110000000000, 0b00011110001000000100000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_DATA_PROCESSING_ONE_SOURCE },
        { 0b01011111001000000011110000000000, 0b00011110001000000010000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_COMPARE },
        { 0b01011111001000000001110000000000, 0b00011110001000000001000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_IMMEDIATE },
        { 0b01011111001000000000110000000000, 0b00011110001000000000010000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_CONDITIONAL_COMPARE },
        { 0b01011111001000000000110000000000, 0b00011110001000000000100000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_DATA_PROCESSING_TWO_SOURCE },
        { 0b01011111001000000000110000000000, 0b00011110001000000000110000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_CONDITIONAL_SELECT },
        { 0b01011111000000000000000000000000, 0b00011111000000000000000000000000,
          A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_DATA_PROCESSING_THREE_SOURCE },
    } } };

class DataProcessingScalarFloatingPointAdvancedSIMDGroup final
    : public DecodeGroup< A64DataProcessingScalarFloatingPointAdvancedSIMDGroup > {
  protected:
    [[nodiscard]] DataProcessingScalarFloatingPointAdvancedSIMDGroup() noexcept = default;
    DELETE_COPY_CLASS(DataProcessingScalarFloatingPointAdvancedSIMDGroup)
    DELETE_MOVE_CLASS(DataProcessingScalarFloatingPointAdvancedSIMDGroup)

  public:
    DECLARE_AS_SINGLETON(DataProcessingScalarFloatingPointAdvancedSIMDGroup)

    enum class CryptographicAES : std::uint32_t
    {
        AESE,
        AESD,
        AESMC,
        AESIMC,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< CryptographicAES > >::max(),
    };
    enum class CryptographicThreeRegisterSHA : std::uint32_t
    {
        SHA1C,
        SHA1P,
        SHA1M,
        SHA1SU0,
        SHA256H,
        SHA256H2,
        SHA256SU1,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< CryptographicThreeRegisterSHA > >::max(),
    };
    enum class CryptographicTwoRegisterSHA : std::uint32_t
    {
        SHA1H,
        SHA1SU1,
        SHA256SU0,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< CryptographicTwoRegisterSHA > >::max(),
    };
    enum class AdvancedSIMDScalarCopy : std::uint32_t
    {
        DUP_ELEMENT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarCopy > >::max(),
    };
    enum class AdvancedSIMDScalarThreeSameFP16 : std::uint32_t
    {
        FMULX,
        FCMEQr,
        FRECPS,
        FRSQRTS,
        FCMGEr,
        FACGE,
        FABD,
        FCMGTr,
        FACGT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarThreeSameFP16 > >::max(),
    };
    enum class AdvancedSIMDScalarTwoRegisterMiscellaneousFP16 : std::uint32_t
    {
        FCVTNS_VECTOR,
        FCVTMS_VECTOR,
        FCVTAS_VECTOR,
        SCVTF_VECTOR_INTEGER,
        FCMGT_ZERO,
        FCMEQ_ZERO,
        FCMLT_ZERO,
        FCVTPS_VECTOR,
        FCVTZS_VECTOR_INTEGER,
        FRECPE,
        FRECPX,
        FCVTNU_VECTOR,
        FCVTMU_VECTOR,
        FCVTAU_VECTOR,
        UCVTF_VECTOR_INTEGER,
        FCMGE_ZERO,
        FCMLE_ZERO,
        FCVTPU_VECTOR,
        FCVTZU_VECTOR_INTEGER,
        FRSQRTE,

        ARM_EMU_COUNT,

        Undefined =
            std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarTwoRegisterMiscellaneousFP16 > >::max(),
    };
    enum class AdvancedSIMDScalarThreeSameExtraction : std::uint32_t
    {
        SQRDMLAH_VECTOR,
        SQRDMLSH_VECTOR,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarThreeSameExtraction > >::max(),
    };
    enum class AdvancedSIMDScalarTwoRegisterMiscellaneous : std::uint32_t
    {
        SUQADD,
        SQABS,
        CMGT_ZERO,
        CMEQ_ZERO,
        CMLT_ZERO,
        ABS,
        SQXTN,
        FCVTNS_VECTOR,
        FCVTMS_VECTOR,
        FCVTAS_VECTOR,
        SCVTF_VECTOR_INTEGER,
        FCMGT_ZERO,
        FCMEQ_ZERO,
        FCMLT_ZERO,
        FCVTPS_VECTOR,
        FCVTZS_VECTOR_INTEGER,
        FRECPE,
        FRECPX,
        USQADD,
        SQNEG,
        CMGE_ZERO,
        CMLE_ZERO,
        NEG_VECTOR,
        SQXTUN,
        UQXTN,
        FCVTXN,
        FCVTNU_VECTOR,
        FCVTMU_VECTOR,
        FCVTAU_VECTOR,
        UCVTF_VECTOR_INTEGER,
        FCMGE_ZERO,
        FCMLE_ZERO,
        FCVTPU_VECTOR,
        FCVTZU_VECTOR_INTEGER,
        FRSQRTE,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarTwoRegisterMiscellaneous > >::max(),
    };
    enum class AdvancedSIMDScalarPairwise : std::uint32_t
    {
        ADDP_SCALAR,
        FMAXNMP_SCALAR_HALF_PRECISION,
        FADDP_SCALAR_HALF_PRECISION,
        FMAXP_SCALAR_HALF_PRECISION,
        FMINNMP_SCALAR_HALF_PRECISION,
        FMINP_SCALAR_HALF_PRECISION,
        FMAXNMP_SCALAR_SINGLE_DOUBLE_PRECISION,
        FADDP_SCALAR_SINGLE_DOUBLE_PRECISION,
        FMAXP_SCALAR_SINGLE_DOUBLE_PRECISION,
        FMINNMP_SCALAR_SINGLE_DOUBLE_PRECISION,
        FMINP_SCALAR_SINGLE_DOUBLE_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarPairwise > >::max(),
    };
    enum class AdvancedSIMDScalarThreeDifferent : std::uint32_t
    {
        SQDMLAL,
        SQDMLSL,
        SQDMULL,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarThreeDifferent > >::max(),
    };
    enum class AdvancedSIMDScalarThreeSame : std::uint32_t
    {
        SQADD,
        SQSUB,
        CMGTr,
        CMGEr,
        SSHL,
        SQSHLr,
        SRSHL,
        SQRSHL,
        ADD_VECTOR,
        CMTST,
        SQDMULH_VECTOR,
        FMULX,
        FCMEQr,
        FRECPS,
        FRSQRTS,
        UQADD,
        UQSUB,
        CMHIr,
        CMHSr,
        USHL,
        UQSHLr,
        URSHL,
        UQRSHL,
        SUB_VECTOR,
        CMEQr,
        SQRDMULH_VECTOR,
        FCMGEr,
        FACGE,
        FABD,
        FCMGTr,
        FACGT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarThreeSame > >::max(),
    };
    enum class AdvancedSIMDScalarShiftByImmediate : std::uint32_t
    {
        SSHR,
        SSRA,
        SRSHR,
        SRSRA,
        SHL,
        SQSHLi,
        SQSHRN,
        SQRSHRN,
        SCVTF_VECTOR_FIXED_POINT,
        FCVTZS_VECTOR_FIXED_POINT,
        USHR,
        USRA,
        URSHR,
        URSRA,
        SRI,
        SLI,
        SQSHLU,
        UQSHLi,
        SQSHRUN,
        SQRSHRUN,
        UQSHRN,
        UQRSHRN,
        UCVTF_VECTOR_FIXED_POINT,
        FCVTZU_VECTOR_FIXED_POINT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarShiftByImmediate > >::max(),
    };
    enum class AdvancedSIMDScalarXIndexedElement : std::uint32_t
    {
        SQDMLAL_ELEMENT,
        SQDMLSL_ELEMENT,
        SQDMULL_ELEMENT,
        SQDMULH_ELEMENT,
        SQRDMULH_ELEMENT,
        FMLA_ELEMENT_SCALAR_HALF_PRECISION,
        FMLS_ELEMENT_SCALAR_HALF_PRECISION,
        FMUL_ELEMENT_SCALAR_HALF_PRECISION,
        FMLA_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION,
        FMLS_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION,
        FMUL_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION,
        SQRDMLAH_ELEMENT,
        SQRDMLSH_ELEMENT,
        FMULX_ELEMENT_SCALAR_HALF_PRECISION,
        FMULX_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDScalarXIndexedElement > >::max(),
    };
    enum class AdvancedSIMDTableLookup : std::uint32_t
    {
        TBL_SINGLE_REGISTER,
        TBX_SINGLE_REGISTER,
        TBL_TWO_REGISTER,
        TBX_TWO_REGISTER,
        TBL_THREE_REGISTER,
        TBX_THREE_REGISTER,
        TBL_FOUR_REGISTER,
        TBX_FOUR_REGISTER,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDTableLookup > >::max(),
    };
    enum class AdvancedSIMDPermute : std::uint32_t
    {
        UZP1,
        TRN1,
        ZIP1,
        UZP2,
        TRN2,
        ZIP2,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDPermute > >::max(),
    };
    enum class AdvancedSIMDExtract : std::uint32_t
    {
        EXT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDExtract > >::max(),
    };
    enum class AdvancedSIMDCopy : std::uint32_t
    {
        DUP_ELEMENT,
        DUP_GENERAL,
        SMOV,
        UMOV,
        INS_GENERAL,
        INS_ELEMENT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDCopy > >::max(),
    };
    enum class AdvancedSIMDThreeSameFP16 : std::uint32_t
    {
        FMAXNM_VECTOR,
        FMLA_VECTOR,
        FADD_VECTOR,
        FMULX,
        FCMEQr,
        FMAX_VECTOR,
        FRECPS,
        FMINNM_VECTOR,
        FMLS_VECTOR,
        FSUB_VECTOR,
        FMIN_VECTOR,
        FRSQRTS,
        FMAXNMP_VECTOR,
        FADDP_VECTOR,
        FMUL_VECTOR,
        FCMGEr,
        FACGE,
        FMAXP_VECTOR,
        FDIV_VECTOR,
        FMINNMP_VECTOR,
        FABD,
        FCMGTr,
        FACGT,
        FMINP_VECTOR,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDThreeSameFP16 > >::max(),
    };
    enum class AdvancedSIMDTwoRegisterMiscellaneousFP16 : std::uint32_t
    {
        FRINTN_VECTOR,
        FRINTM_VECTOR,
        FCVTNS_VECTOR,
        FCVTMS_VECTOR,
        FCVTAS_VECTOR,
        SCVTF_VECTOR_INTEGER,
        FCMGT_ZERO,
        FCMEQ_ZERO,
        FCMLT_ZERO,
        FABS_VECTOR,
        FRINTP_VECTOR,
        FRINTZ_VECTOR,
        FCVTPS_VECTOR,
        FCVTZS_VECTOR_INTEGER,
        FRECPE,
        FRINTA_VECTOR,
        FRINTX_VECTOR,
        FCVTNU_VECTOR,
        FCVTMU_VECTOR,
        FCVTAU_VECTOR,
        UCVTF_VECTOR_INTEGER,
        FCMGE_ZERO,
        FCMLE_ZERO,
        FNEG_VECTOR,
        FRINTI_VECTOR,
        FCVTPU_VECTOR,
        FCVTZU_VECTOR_INTEGER,
        FRSQRTE,
        FSQRT_VECTOR,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDTwoRegisterMiscellaneousFP16 > >::max(),
    };
    enum class AdvancedSIMDThreeRegisterExtension : std::uint32_t
    {
        SDOT_VECTOR,
        USDOT_VECTOR,
        SQRDMLAH_VECTOR,
        SQRDMLSH_VECTOR,
        UDOT_VECTOR,
        FCMLA,
        FCADD,
        BFDOT_VECTOR,
        BFMLALB_VECTOR,
        SMMLA_VECTOR,
        USMMLA_VECTOR,
        BFMMLA,
        UMMLA_VECTOR,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDThreeRegisterExtension > >::max(),
    };
    enum class AdvancedSIMDTwoRegisterMiscellaneous : std::uint32_t
    {
        REV64,
        REV16_VECTOR,
        SADDLP,
        SUQADD,
        CLS_VECTOR,
        CNT,
        SADALP,
        SQABS,
        CMGT_ZERO,
        CMEQ_ZERO,
        CMLT_ZERO,
        ABS,
        XTN,
        SQXTN,
        FCVTN,
        FCVTL,
        FRINTN_VECTOR,
        FRINTM_VECTOR,
        FCVTNS_VECTOR,
        FCVTMS_VECTOR,
        FCVTAS_VECTOR,
        SCVTF_VECTOR_INTEGER,
        FRINT32Z_VECTOR,
        FRINT64Z_VECTOR,
        FCMGT_ZERO,
        FCMEQ_ZERO,
        FCMLT_ZERO,
        FABS_VECTOR,
        FRINTP_VECTOR,
        FRINTZ_VECTOR,
        FCVTPS_VECTOR,
        FCVTZS_VECTOR_INTEGER,
        URECPE,
        FRECPE,
        BFCVTN,
        REV32_VECTOR,
        UADDLP,
        USQADD,
        CLZ_VECTOR,
        UADALP,
        SQNEG,
        CMGE_ZERO,
        CMLE_ZERO,
        NEG_VECTOR,
        SQXTUN,
        SHLL,
        UQXTN,
        FCVTXN,
        FRINTA_VECTOR,
        FRINTX_VECTOR,
        FCVTNU_VECTOR,
        FCVTMU_VECTOR,
        FCVTAU_VECTOR,
        UCVTF_VECTOR_INTEGER,
        FRINT32X_VECTOR,
        FRINT64X_VECTOR,
        NOT,
        RBIT_VECTOR,
        FCMGE_ZERO,
        FCMLE_ZERO,
        FNEG_VECTOR,
        FRINTI_VECTOR,
        FCVTPU_VECTOR,
        FCVTZU_VECTOR_INTEGER,
        URSQRTE,
        FRSQRTE,
        FSQRT_VECTOR,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDTwoRegisterMiscellaneous > >::max(),
    };
    enum class AdvancedSIMDAcrossLanes : std::uint32_t
    {
        SADDLV,
        SMAXV,
        SMINV,
        ADDV,
        FMAXNMV_HALF_PRECISION,
        FMAXV_HALF_PRECISION,
        FMINNMV_HALF_PRECISION,
        FMINV_HALF_PRECISION,
        UADDLV,
        UMAXV,
        UMINV,
        FMAXNMV_SINGLE_DOUBLE_PRECISION,
        FMAXV_SINGLE_DOUBLE_PRECISION,
        FMINNMV_SINGLE_DOUBLE_PRECISION,
        FMINV_SINGLE_DOUBLE_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDAcrossLanes > >::max(),
    };
    enum class AdvancedSIMDThreeDifferent : std::uint32_t
    {
        SADDL,
        SADDW,
        SSUBL,
        SSUBW,
        ADDHN,
        SABAL,
        SUBHN,
        SABDL,
        SMLAL_VECTOR,
        SQDMLAL_VECTOR,
        SMLSL_VECTOR,
        SQDMLSL_VECTOR,
        SMULL_VECTOR,
        SQDMULL_VECTOR,
        PMULL,
        UADDL,
        UADDW,
        USUBL,
        USUBW,
        RADDHN,
        UABAL,
        RSUBHN,
        UABDL,
        UMLAL_VECTOR,
        UMLSL_VECTOR,
        UMULL_VECTOR,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDThreeDifferent > >::max(),
    };
    enum class AdvancedSIMDThreeSame : std::uint32_t
    {
        SHADD,
        SQADD,
        SRHADD,
        SHSUB,
        SQSUB,
        CMGTr,
        CMGEr,
        SSHL,
        SQSHLr,
        SRSHL,
        SQRSHL,
        SMAX,
        SMIN,
        SABD,
        SABA,
        ADD_VECTOR,
        CMTST,
        MLA_VECTOR,
        MUL_VECTOR,
        SMAXP,
        SMINP,
        SQDMULH_VECTOR,
        ADDP_VECTOR,
        FMAXNM_VECTOR,
        FMLA_VECTOR,
        FADD_VECTOR,
        FMULX,
        FCMEQr,
        FMAX_VECTOR,
        FRECPS,
        AND_VECTOR,
        FMLAL,
        BICr_VECTOR,
        FMINNM_VECTOR,
        FMLS_VECTOR,
        FSUB_VECTOR,
        FMIN_VECTOR,
        FRSQRTS,
        ORRr_VECTOR,
        FMLSL,
        ORN_VECTOR,
        UHADD,
        UQADD,
        URHADD,
        UHSUB,
        UQSUB,
        CMHIr,
        CMHSr,
        USHL,
        UQSHLr,
        URSHL,
        UQRSHL,
        UMAX,
        UMIN,
        UABD,
        UABA,
        SUB_VECTOR,
        CMEQr,
        MLS_VECTOR,
        PMUL,
        UMAXP,
        UMINP,
        SQRDMULH_VECTOR,
        FMAXNMP_VECTOR,
        FADDP_VECTOR,
        FMUL_VECTOR,
        FCMGEr,
        FACGE,
        FMAXP_VECTOR,
        FDIV_VECTOR,
        EOR_VECTOR,
        FMLAL2,
        BSL,
        FMINNMP_VECTOR,
        FABD,
        FCMGTr,
        FACGT,
        FMINP_VECTOR,
        BIT,
        FMLSL2,
        BIF,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDThreeSame > >::max(),
    };
    enum class AdvancedSIMDModifiedImmediate : std::uint32_t
    {
        MOVIi_32BIT_SHIFTED,
        ORRi_32BIT_VECTOR,
        MOVIi_16BIT_SHIFTED,
        ORRi_16BIT_VECTOR,
        MOVI_32BIT_SHIFTING_ONES,
        MOVI_8BIT,
        FMOVi_VECTOR_SINGLE_PRECISION,
        FMOVi_VECTOR_HALF_PRECISION,
        MVNIi_32BIT_SHIFTED,
        BICi_32BIT_VECTOR,
        MVNIi_16BIT_SHIFTED,
        BICi_16BIT_VECTOR,
        MVNI_32BIT_SHIFTING_ONES,
        MOVI_64BIT_SCALAR,
        MOVI_64BIT_VECTOR,
        FMOVi_VECTOR_DOUBLE_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDModifiedImmediate > >::max(),
    };
    enum class AdvancedSIMDShiftByImmediate : std::uint32_t
    {
        SSHR,
        SSRA,
        SRSHR,
        SRSRA,
        SHL,
        SQSHLi,
        SHRN,
        RSHRN,
        SQSHRN,
        SQRSHRN,
        SSHLL,
        SCVTF_VECTOR_FIXED_POINT,
        FCVTZS_VECTOR_FIXED_POINT,
        USHR,
        USRA,
        URSHR,
        URSRA,
        SRI,
        SLI,
        SQSHLU,
        UQSHLi,
        SQSHRUN,
        SQRSHRUN,
        UQSHRN,
        UQRSHRN,
        USHLL,
        UCVTF_VECTOR_FIXED_POINT,
        FCVTZU_VECTOR_FIXED_POINT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDShiftByImmediate > >::max(),
    };
    enum class AdvancedSIMDVectorXIndexedElement : std::uint32_t
    {
        SMLAL_ELEMENT,
        SQDMLAL_ELEMENT,
        SMLSL_ELEMENT,
        SQDMLSL_ELEMENT,
        MUL_ELEMENT,
        SMULL_ELEMENT,
        SQDMULL_ELEMENT,
        SQDMULH_ELEMENT,
        SQRDMULH_ELEMENT,
        SDOT_ELEMENT,
        FMLA_ELEMENT_VECTOR_HALF_PRECISION,
        FMLS_ELEMENT_VECTOR_HALF_PRECISION,
        FMUL_ELEMENT_VECTOR_HALF_PRECISION,
        SUDOT_ELEMENT,
        BFDOT_ELEMENT,
        FMLA_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION,
        FMLS_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION,
        FMUL_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION,
        FMLAL,
        FMLSL,
        USDOT_ELEMENT,
        BFMLALB_ELEMENT,
        MLA_ELEMENT,
        UMLAL_ELEMENT,
        MLS_ELEMENT,
        UMLSL_ELEMENT,
        UMULL_ELEMENT,
        SQRDMLAH_ELEMENT,
        UDOT_ELEMENT,
        SQRDMLSH_ELEMENT,
        FMULX_ELEMENT_VECTOR_HALF_PRECISION,
        FCMLA_ELEMENT,
        FMULX_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION,
        FMLAL2,
        FMLSL2,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< AdvancedSIMDVectorXIndexedElement > >::max(),
    };
    enum class CryptographicThreeRegisterIMM2 : std::uint32_t
    {
        SM3TT1A,
        SM3TT1B,
        SM3TT2A,
        SM3TT2B,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< CryptographicThreeRegisterIMM2 > >::max(),
    };
    enum class CryptographicThreeRegisterSHA512 : std::uint32_t
    {
        SHA512H,
        SHA512H2,
        SHA512SU1,
        RAX1,
        SM3PARTW1,
        SM3PARTW2,
        SM4EKEY,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< CryptographicThreeRegisterSHA512 > >::max(),
    };
    enum class CryptographicFourRegister : std::uint32_t
    {
        EOR3,
        BCAX,
        SM3SS1,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< CryptographicFourRegister > >::max(),
    };
    enum class XAR : std::uint32_t
    {

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< XAR > >::max(),
    };
    enum class CryptographicTwoRegisterSHA512 : std::uint32_t
    {
        SHA512SU0,
        SM4E,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< CryptographicTwoRegisterSHA512 > >::max(),
    };
    enum class ConversionFloatingPointAndFixedPoint : std::uint32_t
    {
        SCVTF_SCALAR_FIXED_POINT_32BIT_TO_SINGLE_PRECISION,
        UCVTF_SCALAR_FIXED_POINT_32BIT_TO_SINGLE_PRECISION,
        FCVTZS_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_32BIT,
        FCVTZU_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_32BIT,
        SCVTF_SCALAR_FIXED_POINT_32BIT_TO_DOUBLE_PRECISION,
        UCVTF_SCALAR_FIXED_POINT_32BIT_TO_DOUBLE_PRECISION,
        FCVTZS_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_32BIT,
        FCVTZU_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_32BIT,
        SCVTF_SCALAR_FIXED_POINT_32BIT_TO_HALF_PRECISION,
        UCVTF_SCALAR_FIXED_POINT_32BIT_TO_HALF_PRECISION,
        FCVTZS_SCALAR_FIXED_POINT_HALF_PRECISION_TO_32BIT,
        FCVTZU_SCALAR_FIXED_POINT_HALF_PRECISION_TO_32BIT,
        SCVTF_SCALAR_FIXED_POINT_64BIT_TO_SINGLE_PRECISION,
        UCVTF_SCALAR_FIXED_POINT_64BIT_TO_SINGLE_PRECISION,
        FCVTZS_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_64BIT,
        FCVTZU_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_64BIT,
        SCVTF_SCALAR_FIXED_POINT_64BIT_TO_DOUBLE_PRECISION,
        UCVTF_SCALAR_FIXED_POINT_64BIT_TO_DOUBLE_PRECISION,
        FCVTZS_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_64BIT,
        FCVTZU_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_64BIT,
        SCVTF_SCALAR_FIXED_POINT_64BIT_TO_HALF_PRECISION,
        UCVTF_SCALAR_FIXED_POINT_64BIT_TO_HALF_PRECISION,
        FCVTZS_SCALAR_FIXED_POINT_HALF_PRECISION_TO_64BIT,
        FCVTZU_SCALAR_FIXED_POINT_HALF_PRECISION_TO_64BIT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< ConversionFloatingPointAndFixedPoint > >::max(),
    };
    enum class ConversionFloatingPointAndInteger : std::uint32_t
    {
        FCVTNS_SCALAR_SINGLE_PRECISION_TO_32BIT,
        FCVTNU_SCALAR_SINGLE_PRECISION_TO_32BIT,
        SCVTF_SCALAR_INTEGER_32BIT_TO_SINGLE_PRECISION,
        UCVTF_SCALAR_INTEGER_32BIT_TO_SINGLE_PRECISION,
        FCVTAS_SCALAR_SINGLE_PRECISION_TO_32BIT,
        FCVTAU_SCALAR_SINGLE_PRECISION_TO_32BIT,
        FMOV_GENERAL_SINGLE_PRECISION_TO_32BIT,
        FMOV_GENERAL_32BIT_TO_SINGLE_PRECISION,
        FCVTPS_SCALAR_SINGLE_PRECISION_TO_32BIT,
        FCVTPU_SCALAR_SINGLE_PRECISION_TO_32BIT,
        FCVTMS_SCALAR_SINGLE_PRECISION_TO_32BIT,
        FCVTMU_SCALAR_SINGLE_PRECISION_TO_32BIT,
        FCVTZS_SCALAR_INTEGER_SINGLE_PRECISION_TO_32BIT,
        FCVTZU_SCALAR_INTEGER_SINGLE_PRECISION_TO_32BIT,
        FCVTNS_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        FCVTNU_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        SCVTF_SCALAR_INTEGER_32BIT_TO_DOUBLE_PRECISION,
        UCVTF_SCALAR_INTEGER_32BIT_TO_DOUBLE_PRECISION,
        FCVTAS_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        FCVTAU_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        FCVTPS_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        FCVTPU_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        FCVTMS_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        FCVTMU_SCALAR_DOUBLE_PRECISION_TO_32BIT,
        FCVTZS_SCALAR_INTEGER_DOUBLE_PRECISION_TO_32BIT,
        FCVTZU_SCALAR_INTEGER_DOUBLE_PRECISION_TO_32BIT,
        FJCVTZS,
        FCVTNS_SCALAR_HALF_PRECISION_TO_32BIT,
        FCVTNU_SCALAR_HALF_PRECISION_TO_32BIT,
        SCVTF_SCALAR_INTEGER_32BIT_TO_HALF_PRECISION,
        UCVTF_SCALAR_INTEGER_32BIT_TO_HALF_PRECISION,
        FCVTAS_SCALAR_HALF_PRECISION_TO_32BIT,
        FCVTAU_SCALAR_HALF_PRECISION_TO_32BIT,
        FMOV_GENERAL_HALF_PRECISION_TO_32BIT,
        FMOV_GENERAL_32BIT_TO_HALF_PRECISION,
        FCVTPS_SCALAR_HALF_PRECISION_TO_32BIT,
        FCVTPU_SCALAR_HALF_PRECISION_TO_32BIT,
        FCVTMS_SCALAR_HALF_PRECISION_TO_32BIT,
        FCVTMU_SCALAR_HALF_PRECISION_TO_32BIT,
        FCVTZS_SCALAR_INTEGER_HALF_PRECISION_TO_32BIT,
        FCVTZU_SCALAR_INTEGER_HALF_PRECISION_TO_32BIT,
        FCVTNS_SCALAR_SINGLE_PRECISION_TO_64BIT,
        FCVTNU_SCALAR_SINGLE_PRECISION_TO_64BIT,
        SCVTF_SCALAR_INTEGER_64BIT_TO_SINGLE_PRECISION,
        UCVTF_SCALAR_INTEGER_64BIT_TO_SINGLE_PRECISION,
        FCVTAS_SCALAR_SINGLE_PRECISION_TO_64BIT,
        FCVTAU_SCALAR_SINGLE_PRECISION_TO_64BIT,
        FCVTPS_SCALAR_SINGLE_PRECISION_TO_64BIT,
        FCVTPU_SCALAR_SINGLE_PRECISION_TO_64BIT,
        FCVTMS_SCALAR_SINGLE_PRECISION_TO_64BIT,
        FCVTMU_SCALAR_SINGLE_PRECISION_TO_64BIT,
        FCVTZS_SCALAR_INTEGER_SINGLE_PRECISION_TO_64BIT,
        FCVTZU_SCALAR_INTEGER_SINGLE_PRECISION_TO_64BIT,
        FCVTNS_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        FCVTNU_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        SCVTF_SCALAR_INTEGER_64BIT_TO_DOUBLE_PRECISION,
        UCVTF_SCALAR_INTEGER_64BIT_TO_DOUBLE_PRECISION,
        FCVTAS_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        FCVTAU_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        FMOV_GENERAL_DOUBLE_PRECISION_TO_64BIT,
        FMOV_GENERAL_64BIT_TO_DOUBLE_PRECISION,
        FCVTPS_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        FCVTPU_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        FCVTMS_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        FCVTMU_SCALAR_DOUBLE_PRECISION_TO_64BIT,
        FCVTZS_SCALAR_INTEGER_DOUBLE_PRECISION_TO_64BIT,
        FCVTZU_SCALAR_INTEGER_DOUBLE_PRECISION_TO_64BIT,
        FMOV_GENERAL_TOP_HALF_128BIT_TO_64BIT,
        FMOV_GENERAL_64BIT_TO_TOP_HALF_128BIT,
        FCVTNS_SCALAR_HALF_PRECISION_TO_64BIT,
        FCVTNU_SCALAR_HALF_PRECISION_TO_64BIT,
        SCVTF_SCALAR_INTEGER_64BIT_TO_HALF_PRECISION,
        UCVTF_SCALAR_INTEGER_64BIT_TO_HALF_PRECISION,
        FCVTAS_SCALAR_HALF_PRECISION_TO_64BIT,
        FCVTAU_SCALAR_HALF_PRECISION_TO_64BIT,
        FMOV_GENERAL_HALF_PRECISION_TO_64BIT,
        FMOV_GENERAL_64BIT_TO_HALF_PRECISION,
        FCVTPS_SCALAR_HALF_PRECISION_TO_64BIT,
        FCVTPU_SCALAR_HALF_PRECISION_TO_64BIT,
        FCVTMS_SCALAR_HALF_PRECISION_TO_64BIT,
        FCVTMU_SCALAR_HALF_PRECISION_TO_64BIT,
        FCVTZS_SCALAR_INTEGER_HALF_PRECISION_TO_64BIT,
        FCVTZU_SCALAR_INTEGER_HALF_PRECISION_TO_64BIT,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< ConversionFloatingPointAndInteger > >::max(),
    };
    enum class FloatingPointDataProcessingOneSource : std::uint32_t
    {
        FMOVr_SINGLE_PRECISION,
        FABS_SCALAR_SINGLE_PRECISION,
        FNEG_SCALAR_SINGLE_PRECISION,
        FSQRT_SCALAR_SINGLE_PRECISION,
        FCVT_SINGLE_PRECISION_TO_DOUBLE_PRECISION,
        FCVT_SINGLE_PRECISION_TO_HALF_PRECISION,
        FRINTN_SCALAR_SINGLE_PRECISION,
        FRINTP_SCALAR_SINGLE_PRECISION,
        FRINTM_SCALAR_SINGLE_PRECISION,
        FRINTZ_SCALAR_SINGLE_PRECISION,
        FRINTA_SCALAR_SINGLE_PRECISION,
        FRINTX_SCALAR_SINGLE_PRECISION,
        FRINTI_SCALAR_SINGLE_PRECISION,
        FRINT32Z_SCALAR_SINGLE_PRECISION,
        FRINT32X_SCALAR_SINGLE_PRECISION,
        FRINT64Z_SCALAR_SINGLE_PRECISION,
        FRINT64X_SCALAR_SINGLE_PRECISION,
        FMOVr_DOUBLE_PRECISION,
        FABS_SCALAR_DOUBLE_PRECISION,
        FNEG_SCALAR_DOUBLE_PRECISION,
        FSQRT_SCALAR_DOUBLE_PRECISION,
        FCVT_DOUBLE_PRECISION_TO_SINGLE_PRECISION,
        BFCVT,
        FCVT_DOUBLE_PRECISION_TO_HALF_PRECISION,
        FRINTN_SCALAR_DOUBLE_PRECISION,
        FRINTP_SCALAR_DOUBLE_PRECISION,
        FRINTM_SCALAR_DOUBLE_PRECISION,
        FRINTZ_SCALAR_DOUBLE_PRECISION,
        FRINTA_SCALAR_DOUBLE_PRECISION,
        FRINTX_SCALAR_DOUBLE_PRECISION,
        FRINTI_SCALAR_DOUBLE_PRECISION,
        FRINT32Z_SCALAR_DOUBLE_PRECISION,
        FRINT32X_SCALAR_DOUBLE_PRECISION,
        FRINT64Z_SCALAR_DOUBLE_PRECISION,
        FRINT64X_SCALAR_DOUBLE_PRECISION,
        FMOVr_HALF_PRECISION,
        FABS_SCALAR_HALF_PRECISION,
        FNEG_SCALAR_HALF_PRECISION,
        FSQRT_SCALAR_HALF_PRECISION,
        FCVT_HALF_PRECISION_TO_SINGLE_PRECISION,
        FCVT_HALF_PRECISION_TO_DOUBLE_PRECISION,
        FRINTN_SCALAR_HALF_PRECISION,
        FRINTP_SCALAR_HALF_PRECISION,
        FRINTM_SCALAR_HALF_PRECISION,
        FRINTZ_SCALAR_HALF_PRECISION,
        FRINTA_SCALAR_HALF_PRECISION,
        FRINTX_SCALAR_HALF_PRECISION,
        FRINTI_SCALAR_HALF_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< FloatingPointDataProcessingOneSource > >::max(),
    };
    enum class FloatingPointCompare : std::uint32_t
    {
        FCMP,
        FCMPE,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< FloatingPointCompare > >::max(),
    };
    enum class FloatingPointImmediate : std::uint32_t
    {
        FMOVi_SCALAR_SINGLE_PRECISION,
        FMOVi_SCALAR_DOUBLE_PRECISION,
        FMOVi_SCALAR_HALF_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< FloatingPointImmediate > >::max(),
    };
    enum class FloatingPointConditionalCompare : std::uint32_t
    {
        FCCMP_SINGLE_PRECISION,
        FCCMPE_SINGLE_PRECISION,
        FCCMP_DOUBLE_PRECISION,
        FCCMPE_DOUBLE_PRECISION,
        FCCMP_HALF_PRECISION,
        FCCMPE_HALF_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< FloatingPointConditionalCompare > >::max(),
    };
    enum class FloatingPointDataProcessingTwoSource : std::uint32_t
    {
        FMUL_SCALAR_SINGLE_PRECISION,
        FDIV_SCALAR_SINGLE_PRECISION,
        FADD_SCALAR_SINGLE_PRECISION,
        FSUB_SCALAR_SINGLE_PRECISION,
        FMAX_SCALAR_SINGLE_PRECISION,
        FMIN_SCALAR_SINGLE_PRECISION,
        FMAXNM_SCALAR_SINGLE_PRECISION,
        FMINNM_SCALAR_SINGLE_PRECISION,
        FNMUL_SCALAR_SINGLE_PRECISION,
        FMUL_SCALAR_DOUBLE_PRECISION,
        FDIV_SCALAR_DOUBLE_PRECISION,
        FADD_SCALAR_DOUBLE_PRECISION,
        FSUB_SCALAR_DOUBLE_PRECISION,
        FMAX_SCALAR_DOUBLE_PRECISION,
        FMIN_SCALAR_DOUBLE_PRECISION,
        FMAXNM_SCALAR_DOUBLE_PRECISION,
        FMINNM_SCALAR_DOUBLE_PRECISION,
        FNMUL_SCALAR_DOUBLE_PRECISION,
        FMUL_SCALAR_HALF_PRECISION,
        FDIV_SCALAR_HALF_PRECISION,
        FADD_SCALAR_HALF_PRECISION,
        FSUB_SCALAR_HALF_PRECISION,
        FMAX_SCALAR_HALF_PRECISION,
        FMIN_SCALAR_HALF_PRECISION,
        FMAXNM_SCALAR_HALF_PRECISION,
        FMINNM_SCALAR_HALF_PRECISION,
        FNMUL_SCALAR_HALF_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< FloatingPointDataProcessingTwoSource > >::max(),
    };
    enum class FloatingPointConditionalSelect : std::uint32_t
    {
        FCSEL_SINGLE_PRECISION,
        FCSEL_DOUBLE_PRECISION,
        FCSEL_HALF_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< FloatingPointConditionalSelect > >::max(),
    };
    enum class FloatingPointDataProcessingThreeSource : std::uint32_t
    {
        FMADD_SINGLE_PRECISION,
        FMSUB_SINGLE_PRECISION,
        FNMADD_SINGLE_PRECISION,
        FNMSUB_SINGLE_PRECISION,
        FMADD_DOUBLE_PRECISION,
        FMSUB_DOUBLE_PRECISION,
        FNMADD_DOUBLE_PRECISION,
        FNMSUB_DOUBLE_PRECISION,
        FMADD_HALF_PRECISION,
        FMSUB_HALF_PRECISION,
        FNMADD_HALF_PRECISION,
        FNMSUB_HALF_PRECISION,

        ARM_EMU_COUNT,

        Undefined = std::numeric_limits< std::underlying_type_t< FloatingPointDataProcessingThreeSource > >::max(),
    };

  private:
    inline static constexpr Table< CryptographicAES, std::underlying_type_t< CryptographicAES >,
                                   enum_size_v< CryptographicAES > >
        CryptographicAESTable { { {
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0100'1110'0010'1000'0100'1000'0000'0000,
              CryptographicAES::AESE },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0100'1110'0010'1000'0101'1000'0000'0000,
              CryptographicAES::AESD },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0100'1110'0010'1000'0110'1000'0000'0000,
              CryptographicAES::AESMC },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0100'1110'0010'1000'0111'1000'0000'0000,
              CryptographicAES::AESIMC },
        } } };
    inline static constexpr Table< CryptographicThreeRegisterSHA,
                                   std::underlying_type_t< CryptographicThreeRegisterSHA >,
                                   enum_size_v< CryptographicThreeRegisterSHA > >
        CryptographicThreeRegisterSHATable { { {
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0000'0000'0000'0000,
              CryptographicThreeRegisterSHA::SHA1C },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0001'0000'0000'0000,
              CryptographicThreeRegisterSHA::SHA1P },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0010'0000'0000'0000,
              CryptographicThreeRegisterSHA::SHA1M },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0011'0000'0000'0000,
              CryptographicThreeRegisterSHA::SHA1SU0 },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0100'0000'0000'0000,
              CryptographicThreeRegisterSHA::SHA256H },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0101'0000'0000'0000,
              CryptographicThreeRegisterSHA::SHA256H2 },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0110'0000'0000'0000,
              CryptographicThreeRegisterSHA::SHA256SU1 },
        } } };
    inline static constexpr Table< CryptographicTwoRegisterSHA, std::underlying_type_t< CryptographicTwoRegisterSHA >,
                                   enum_size_v< CryptographicTwoRegisterSHA > >
        CryptographicTwoRegisterSHATable { { {
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0010'1000'0000'1000'0000'0000,
              CryptographicTwoRegisterSHA::SHA1H },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0010'1000'0001'1000'0000'0000,
              CryptographicTwoRegisterSHA::SHA1SU1 },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0010'1000'0010'1000'0000'0000,
              CryptographicTwoRegisterSHA::SHA256SU0 },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarCopy, std::underlying_type_t< AdvancedSIMDScalarCopy >,
                                   enum_size_v< AdvancedSIMDScalarCopy > >
        AdvancedSIMDScalarCopyTable { { {
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDScalarCopy::DUP_ELEMENT },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarThreeSameFP16,
                                   std::underlying_type_t< AdvancedSIMDScalarThreeSameFP16 >,
                                   enum_size_v< AdvancedSIMDScalarThreeSameFP16 > >
        AdvancedSIMDScalarThreeSameFP16Table { { {
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0100'0000'0001'1100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FMULX },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0100'0000'0010'0100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FCMEQr },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'0100'0000'0011'1100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FRECPS },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0101'1110'1100'0000'0011'1100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FRSQRTS },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0111'1110'0100'0000'0010'0100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FCMGEr },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0111'1110'0100'0000'0010'1100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FACGE },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0111'1110'1100'0000'0001'0100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FABD },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0111'1110'1100'0000'0010'0100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FCMGTr },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0111'1110'1100'0000'0010'1100'0000'0000,
              AdvancedSIMDScalarThreeSameFP16::FACGT },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarTwoRegisterMiscellaneousFP16,
                                   std::underlying_type_t< AdvancedSIMDScalarTwoRegisterMiscellaneousFP16 >,
                                   enum_size_v< AdvancedSIMDScalarTwoRegisterMiscellaneousFP16 > >
        AdvancedSIMDScalarTwoRegisterMiscellaneousFP16Table { { {
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0111'1001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTNS_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0111'1001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTMS_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0111'1001'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTAS_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0111'1001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::SCVTF_VECTOR_INTEGER },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1111'1000'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCMGT_ZERO },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1111'1000'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCMEQ_ZERO },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1111'1000'1110'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCMLT_ZERO },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1111'1001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTPS_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1111'1001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTZS_VECTOR_INTEGER },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1111'1001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FRECPE },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1111'1001'1111'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FRECPX },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'0111'1001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTNU_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'0111'1001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTMU_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'0111'1001'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTAU_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'0111'1001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::UCVTF_VECTOR_INTEGER },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'1111'1000'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCMGE_ZERO },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'1111'1000'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCMLE_ZERO },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'1111'1001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTPU_VECTOR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'1111'1001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FCVTZU_VECTOR_INTEGER },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0111'1110'1111'1001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneousFP16::FRSQRTE },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarThreeSameExtraction,
                                   std::underlying_type_t< AdvancedSIMDScalarThreeSameExtraction >,
                                   enum_size_v< AdvancedSIMDScalarThreeSameExtraction > >
        AdvancedSIMDScalarThreeSameExtractionTable { { {
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDScalarThreeSameExtraction::SQRDMLAH_VECTOR },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0000'0000'1000'1100'0000'0000,
              AdvancedSIMDScalarThreeSameExtraction::SQRDMLSH_VECTOR },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarTwoRegisterMiscellaneous,
                                   std::underlying_type_t< AdvancedSIMDScalarTwoRegisterMiscellaneous >,
                                   enum_size_v< AdvancedSIMDScalarTwoRegisterMiscellaneous > >
        AdvancedSIMDScalarTwoRegisterMiscellaneousTable { { {
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0010'0000'0011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::SUQADD },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0010'0000'0111'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::SQABS },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0010'0000'1000'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::CMGT_ZERO },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0010'0000'1001'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::CMEQ_ZERO },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0010'0000'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::CMLT_ZERO },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0010'0001'0100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::ABS },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0010'0000'0011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::SQXTN },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'0010'0001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTNS_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'0010'0001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTMS_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'0010'0001'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTAS_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'0010'0001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::SCVTF_VECTOR_INTEGER },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'1010'0000'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCMGT_ZERO },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'1010'0000'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCMEQ_ZERO },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'1010'0000'1110'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCMLT_ZERO },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'1010'0001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTPS_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'1010'0001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTZS_VECTOR_INTEGER },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'1010'0001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FRECPE },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0101'1110'1010'0001'1111'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FRECPX },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0111'1110'0010'0000'0011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::USQADD },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0111'1110'0010'0000'0111'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::SQNEG },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0111'1110'0010'0000'1000'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::CMGE_ZERO },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0111'1110'0010'0000'1001'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::CMLE_ZERO },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0111'1110'0010'0000'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::NEG_VECTOR },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0111'1110'0010'0001'0010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::SQXTUN },
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0111'1110'0010'0001'0100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::UQXTN },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'0010'0001'0110'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTXN },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'0010'0001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTNU_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'0010'0001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTMU_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'0010'0001'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTAU_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'0010'0001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::UCVTF_VECTOR_INTEGER },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'1010'0000'1100'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCMGE_ZERO },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'1010'0000'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCMLE_ZERO },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'1010'0001'1010'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTPU_VECTOR },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'1010'0001'1011'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FCVTZU_VECTOR_INTEGER },
            { 0b1111'1111'1010'1111'1111'1100'0000'0000, 0b0111'1110'1010'0001'1101'1000'0000'0000,
              AdvancedSIMDScalarTwoRegisterMiscellaneous::FRSQRTE },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarPairwise, std::underlying_type_t< AdvancedSIMDScalarPairwise >,
                                   enum_size_v< AdvancedSIMDScalarPairwise > >
        AdvancedSIMDScalarPairwiseTable { { {
            { 0b1111'1111'0011'1111'1111'1100'0000'0000, 0b0101'1110'0011'0001'1011'1000'0000'0000,
              AdvancedSIMDScalarPairwise::ADDP_SCALAR },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0011'0000'1100'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMAXNMP_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0011'0000'1101'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FADDP_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'0011'0000'1111'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMAXP_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1011'0000'1100'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMINNMP_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0101'1110'1011'0000'1111'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMINP_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1011'1111'1111'1100'0000'0000, 0b0111'1110'0011'0000'1100'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMAXNMP_SCALAR_SINGLE_DOUBLE_PRECISION },
            { 0b1111'1111'1011'1111'1111'1100'0000'0000, 0b0111'1110'0011'0000'1101'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FADDP_SCALAR_SINGLE_DOUBLE_PRECISION },
            { 0b1111'1111'1011'1111'1111'1100'0000'0000, 0b0111'1110'0011'0000'1111'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMAXP_SCALAR_SINGLE_DOUBLE_PRECISION },
            { 0b1111'1111'1011'1111'1111'1100'0000'0000, 0b0111'1110'1011'0000'1100'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMINNMP_SCALAR_SINGLE_DOUBLE_PRECISION },
            { 0b1111'1111'1011'1111'1111'1100'0000'0000, 0b0111'1110'1011'0000'1111'1000'0000'0000,
              AdvancedSIMDScalarPairwise::FMINP_SCALAR_SINGLE_DOUBLE_PRECISION },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarThreeDifferent,
                                   std::underlying_type_t< AdvancedSIMDScalarThreeDifferent >,
                                   enum_size_v< AdvancedSIMDScalarThreeDifferent > >
        AdvancedSIMDScalarThreeDifferentTable { { {
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1001'0000'0000'0000,
              AdvancedSIMDScalarThreeDifferent::SQDMLAL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1011'0000'0000'0000,
              AdvancedSIMDScalarThreeDifferent::SQDMLSL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1101'0000'0000'0000,
              AdvancedSIMDScalarThreeDifferent::SQDMULL },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarThreeSame, std::underlying_type_t< AdvancedSIMDScalarThreeSame >,
                                   enum_size_v< AdvancedSIMDScalarThreeSame > >
        AdvancedSIMDScalarThreeSameTable { { {
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0000'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::SQADD },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0010'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::SQSUB },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0011'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::CMGTr },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0011'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::CMGEr },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0100'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::SSHL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0100'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::SQSHLr },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0101'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::SRSHL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'0101'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::SQRSHL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1000'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::ADD_VECTOR },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1000'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::CMTST },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1011'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::SQDMULH_VECTOR },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1101'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::FMULX },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1110'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::FCMEQr },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0101'1110'0010'0000'1111'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::FRECPS },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0101'1110'1010'0000'1111'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::FRSQRTS },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0000'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::UQADD },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0010'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::UQSUB },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0011'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::CMHIr },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0011'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::CMHSr },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0100'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::USHL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0100'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::UQSHLr },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0101'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::URSHL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'0101'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::UQRSHL },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'1000'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::SUB_VECTOR },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'1000'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::CMEQr },
            { 0b1111'1111'0010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'1011'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::SQRDMULH_VECTOR },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'1110'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::FCMGEr },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0111'1110'0010'0000'1110'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::FACGE },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0111'1110'1010'0000'1101'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::FABD },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0111'1110'1010'0000'1110'0100'0000'0000,
              AdvancedSIMDScalarThreeSame::FCMGTr },
            { 0b1111'1111'1010'0000'1111'1100'0000'0000, 0b0111'1110'1010'0000'1110'1100'0000'0000,
              AdvancedSIMDScalarThreeSame::FACGT },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarShiftByImmediate,
                                   std::underlying_type_t< AdvancedSIMDScalarShiftByImmediate >,
                                   enum_size_v< AdvancedSIMDScalarShiftByImmediate > + 24 >
        AdvancedSIMDScalarShiftByImmediateTable { { {
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0010'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0011'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0101'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0111'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1001'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1111'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0010'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0011'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0100'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0101'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0110'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0111'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1000'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1001'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1111'1000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1111'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::Undefined },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SSHR },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SSRA },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0010'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SRSHR },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0011'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SRSRA },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0101'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SHL },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'0111'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SQSHLi },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SQSHRN },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1001'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SQRSHRN },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SCVTF_VECTOR_FIXED_POINT },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0101'1111'0000'0000'1111'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::FCVTZS_VECTOR_FIXED_POINT },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::USHR },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::USRA },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0010'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::URSHR },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0011'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::URSRA },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0100'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SRI },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0101'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SLI },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0110'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SQSHLU },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'0111'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::UQSHLi },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SQSHRUN },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1000'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::SQRSHRUN },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::UQSHRN },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1001'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::UQRSHRN },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::UCVTF_VECTOR_FIXED_POINT },
            { 0b1111'1111'1000'0000'1111'1100'0000'0000, 0b0111'1111'0000'0000'1111'1100'0000'0000,
              AdvancedSIMDScalarShiftByImmediate::FCVTZU_VECTOR_FIXED_POINT },
        } } };
    inline static constexpr Table< AdvancedSIMDScalarXIndexedElement,
                                   std::underlying_type_t< AdvancedSIMDScalarXIndexedElement >,
                                   enum_size_v< AdvancedSIMDScalarXIndexedElement > >
        AdvancedSIMDScalarXIndexedElementTable { { {
            { 0b1111'1111'0000'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'0011'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::SQDMLAL_ELEMENT },
            { 0b1111'1111'0000'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'0111'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::SQDMLSL_ELEMENT },
            { 0b1111'1111'0000'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'1011'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::SQDMULL_ELEMENT },
            { 0b1111'1111'0000'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'1100'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::SQDMULH_ELEMENT },
            { 0b1111'1111'0000'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'1101'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::SQRDMULH_ELEMENT },
            { 0b1111'1111'1100'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'0001'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMLA_ELEMENT_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1100'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'0101'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMLS_ELEMENT_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1100'0000'1111'0100'0000'0000, 0b0101'1111'0000'0000'1001'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMUL_ELEMENT_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1000'0000'1111'0100'0000'0000, 0b0101'1111'1000'0000'0001'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMLA_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION },
            { 0b1111'1111'1000'0000'1111'0100'0000'0000, 0b0101'1111'1000'0000'0101'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMLS_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION },
            { 0b1111'1111'1000'0000'1111'0100'0000'0000, 0b0101'1111'1000'0000'1001'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMUL_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION },
            { 0b1111'1111'0000'0000'1111'0100'0000'0000, 0b0111'1111'0000'0000'1101'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::SQRDMLAH_ELEMENT },
            { 0b1111'1111'0000'0000'1111'0100'0000'0000, 0b0111'1111'0000'0000'1111'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::SQRDMLSH_ELEMENT },
            { 0b1111'1111'1100'0000'1111'0100'0000'0000, 0b0111'1111'0000'0000'1001'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMULX_ELEMENT_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1000'0000'1111'0100'0000'0000, 0b0111'1111'1000'0000'1001'0000'0000'0000,
              AdvancedSIMDScalarXIndexedElement::FMULX_ELEMENT_SCALAR_SINGLE_DOUBLE_PRECISION },
        } } };
    inline static constexpr Table< AdvancedSIMDTableLookup, std::underlying_type_t< AdvancedSIMDTableLookup >,
                                   enum_size_v< AdvancedSIMDTableLookup > >
        AdvancedSIMDTableLookupTable { { {
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0000'0000'0000'0000,
              AdvancedSIMDTableLookup::TBL_SINGLE_REGISTER },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0001'0000'0000'0000,
              AdvancedSIMDTableLookup::TBX_SINGLE_REGISTER },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0010'0000'0000'0000,
              AdvancedSIMDTableLookup::TBL_TWO_REGISTER },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0011'0000'0000'0000,
              AdvancedSIMDTableLookup::TBX_TWO_REGISTER },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0100'0000'0000'0000,
              AdvancedSIMDTableLookup::TBL_THREE_REGISTER },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0101'0000'0000'0000,
              AdvancedSIMDTableLookup::TBX_THREE_REGISTER },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0110'0000'0000'0000,
              AdvancedSIMDTableLookup::TBL_FOUR_REGISTER },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0111'0000'0000'0000,
              AdvancedSIMDTableLookup::TBX_FOUR_REGISTER },
        } } };
    inline static constexpr Table< AdvancedSIMDPermute, std::underlying_type_t< AdvancedSIMDPermute >,
                                   enum_size_v< AdvancedSIMDPermute > >
        AdvancedSIMDPermuteTable { { {
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0001'1000'0000'0000,
              AdvancedSIMDPermute::UZP1 },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0010'1000'0000'0000,
              AdvancedSIMDPermute::TRN1 },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0011'1000'0000'0000,
              AdvancedSIMDPermute::ZIP1 },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0101'1000'0000'0000,
              AdvancedSIMDPermute::UZP2 },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0110'1000'0000'0000,
              AdvancedSIMDPermute::TRN2 },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0111'1000'0000'0000,
              AdvancedSIMDPermute::ZIP2 },
        } } };
    inline static constexpr Table< AdvancedSIMDExtract, std::underlying_type_t< AdvancedSIMDExtract >,
                                   enum_size_v< AdvancedSIMDExtract > >
        AdvancedSIMDExtractTable { { {
            { 0b1011'1111'1110'0000'1000'0100'0000'0000, 0b0010'1110'0000'0000'0000'0000'0000'0000,
              AdvancedSIMDExtract::EXT },
        } } };
    inline static constexpr Table< AdvancedSIMDCopy, std::underlying_type_t< AdvancedSIMDCopy >,
                                   enum_size_v< AdvancedSIMDCopy > + 2 >
        AdvancedSIMDCopyTable { { {
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDCopy::DUP_ELEMENT },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0000'1100'0000'0000,
              AdvancedSIMDCopy::DUP_GENERAL },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0010'1100'0000'0000,
              AdvancedSIMDCopy::SMOV },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'0011'1100'0000'0000,
              AdvancedSIMDCopy::UMOV },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0100'1110'0000'0000'0001'1100'0000'0000,
              AdvancedSIMDCopy::INS_GENERAL },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0100'1110'0000'0000'0010'1100'0000'0000,
              AdvancedSIMDCopy::SMOV },
            { 0b1111'1111'1110'1111'1111'1100'0000'0000, 0b0100'1110'0000'1000'0011'1100'0000'0000,
              AdvancedSIMDCopy::UMOV },
            { 0b1111'1111'1110'0000'1000'0100'0000'0000, 0b0110'1110'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDCopy::INS_ELEMENT },
        } } };
    inline static constexpr Table< AdvancedSIMDThreeSameFP16, std::underlying_type_t< AdvancedSIMDThreeSameFP16 >,
                                   enum_size_v< AdvancedSIMDThreeSameFP16 > >
        AdvancedSIMDThreeSameFP16Table { { {
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'0000'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMAXNM_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'0000'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMLA_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'0001'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FADD_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMULX },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'0010'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FCMEQr },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'0011'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMAX_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'0011'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FRECPS },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1100'0000'0000'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMINNM_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1100'0000'0000'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMLS_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1100'0000'0001'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FSUB_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1100'0000'0011'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMIN_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1100'0000'0011'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FRSQRTS },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0100'0000'0000'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMAXNMP_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0100'0000'0001'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FADDP_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0100'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMUL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0100'0000'0010'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FCMGEr },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0100'0000'0010'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FACGE },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0100'0000'0011'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMAXP_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0100'0000'0011'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FDIV_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1100'0000'0000'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMINNMP_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1100'0000'0001'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FABD },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1100'0000'0010'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FCMGTr },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1100'0000'0010'1100'0000'0000,
              AdvancedSIMDThreeSameFP16::FACGT },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1100'0000'0011'0100'0000'0000,
              AdvancedSIMDThreeSameFP16::FMINP_VECTOR },
        } } };
    inline static constexpr Table< AdvancedSIMDTwoRegisterMiscellaneousFP16,
                                   std::underlying_type_t< AdvancedSIMDTwoRegisterMiscellaneousFP16 >,
                                   enum_size_v< AdvancedSIMDTwoRegisterMiscellaneousFP16 > >
        AdvancedSIMDTwoRegisterMiscellaneousFP16Table { { {
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRINTN_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0111'1001'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRINTM_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0111'1001'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTNS_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0111'1001'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTMS_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0111'1001'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTAS_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0111'1001'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::SCVTF_VECTOR_INTEGER },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1000'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCMGT_ZERO },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1000'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCMEQ_ZERO },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1000'1110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCMLT_ZERO },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1000'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FABS_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRINTP_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1001'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRINTZ_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1001'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTPS_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1001'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTZS_VECTOR_INTEGER },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1111'1001'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRECPE },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'0111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRINTA_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'0111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRINTX_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'0111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTNU_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'0111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTMU_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'0111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTAU_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'0111'1001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::UCVTF_VECTOR_INTEGER },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1000'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCMGE_ZERO },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1000'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCMLE_ZERO },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1000'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FNEG_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1001'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRINTI_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1001'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTPU_VECTOR },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1001'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FCVTZU_VECTOR_INTEGER },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1001'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FRSQRTE },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0010'1110'1111'1001'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneousFP16::FSQRT_VECTOR },
        } } };
    inline static constexpr Table< AdvancedSIMDThreeRegisterExtension,
                                   std::underlying_type_t< AdvancedSIMDThreeRegisterExtension >,
                                   enum_size_v< AdvancedSIMDThreeRegisterExtension > >
        AdvancedSIMDThreeRegisterExtensionTable { { {
            { 0b0011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::SDOT_VECTOR },
            { 0b0011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1000'0000'1001'1100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::USDOT_VECTOR },
            { 0b0011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::SQRDMLAH_VECTOR },
            { 0b0011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0000'0000'1000'1100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::SQRDMLSH_VECTOR },
            { 0b0011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::UDOT_VECTOR },
            { 0b0011'1111'0010'0000'1110'0100'0000'0000, 0b0010'1110'0000'0000'1100'0100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::FCMLA },
            { 0b0011'1111'0010'0000'1110'1100'0000'0000, 0b0010'1110'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::FCADD },
            { 0b0011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0100'0000'1111'1100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::BFDOT_VECTOR },
            { 0b0011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1100'0000'1111'1100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::BFMLALB_VECTOR },
            { 0b0111'1111'1110'0000'1111'1100'0000'0000, 0b0100'1110'1000'0000'1010'0100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::SMMLA_VECTOR },
            { 0b0111'1111'1110'0000'1111'1100'0000'0000, 0b0100'1110'1000'0000'1010'1100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::USMMLA_VECTOR },
            { 0b0111'1111'1110'0000'1111'1100'0000'0000, 0b0110'1110'0100'0000'1110'1100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::BFMMLA },
            { 0b0111'1111'1110'0000'1111'1100'0000'0000, 0b0110'1110'1000'0000'1010'0100'0000'0000,
              AdvancedSIMDThreeRegisterExtension::UMMLA_VECTOR },
        } } };
    inline static constexpr Table< AdvancedSIMDTwoRegisterMiscellaneous,
                                   std::underlying_type_t< AdvancedSIMDTwoRegisterMiscellaneous >,
                                   enum_size_v< AdvancedSIMDTwoRegisterMiscellaneous > >
        AdvancedSIMDTwoRegisterMiscellaneousTable { { {
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::REV64 },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::REV16_VECTOR },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SADDLP },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SUQADD },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CLS_VECTOR },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CNT },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SADALP },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'0111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SQABS },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CMGT_ZERO },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CMEQ_ZERO },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CMLT_ZERO },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0000'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::ABS },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'0010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::XTN },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'0100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SQXTN },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'0110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTN },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'0111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTL },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINTN_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINTM_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTNS_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTMS_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTAS_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SCVTF_VECTOR_INTEGER },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINT32Z_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'0010'0001'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINT64Z_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0000'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCMGT_ZERO },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0000'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCMEQ_ZERO },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0000'1110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCMLT_ZERO },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0000'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FABS_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINTP_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0001'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINTZ_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0001'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTPS_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0001'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTZS_VECTOR_INTEGER },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0001'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::URECPE },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0000'1110'1010'0001'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRECPE },
            { 0b1010'1110'1111'1111'1111'1100'0000'0000, 0b0000'1110'1010'0001'0110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::BFCVTN },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'0000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::REV32_VECTOR },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'0010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::UADDLP },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'0011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::USQADD },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'0100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CLZ_VECTOR },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'0110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::UADALP },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'0111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SQNEG },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CMGE_ZERO },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::CMLE_ZERO },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::NEG_VECTOR },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'0010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SQXTUN },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'0011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::SHLL },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'0100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::UQXTN },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'0110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTXN },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1000'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINTA_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINTX_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTNU_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTMU_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTAU_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::UCVTF_VECTOR_INTEGER },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1110'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINT32X_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'0010'0001'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINT64X_VECTOR },
            { 0b1010'1110'1111'1111'1111'1100'0000'0000, 0b0010'1110'0010'0000'0101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::NOT },
            { 0b1010'1110'1111'1111'1111'1100'0000'0000, 0b0010'1110'0110'0000'0101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::RBIT_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0000'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCMGE_ZERO },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0000'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCMLE_ZERO },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0000'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FNEG_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0001'1001'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRINTI_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0001'1010'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTPU_VECTOR },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0001'1011'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FCVTZU_VECTOR_INTEGER },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0001'1100'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::URSQRTE },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0001'1101'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FRSQRTE },
            { 0b1010'1110'1011'1111'1111'1100'0000'0000, 0b0010'1110'1010'0001'1111'1000'0000'0000,
              AdvancedSIMDTwoRegisterMiscellaneous::FSQRT_VECTOR },

        } } };
    inline static constexpr Table< AdvancedSIMDAcrossLanes, std::underlying_type_t< AdvancedSIMDAcrossLanes >,
                                   enum_size_v< AdvancedSIMDAcrossLanes > >
        AdvancedSIMDAcrossLanesTable { { {
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0011'0000'0011'1000'0000'0000,
              AdvancedSIMDAcrossLanes::SADDLV },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0011'0000'1010'1000'0000'0000,
              AdvancedSIMDAcrossLanes::SMAXV },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0011'0001'1010'1000'0000'0000,
              AdvancedSIMDAcrossLanes::SMINV },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0000'1110'0011'0001'1011'1000'0000'0000,
              AdvancedSIMDAcrossLanes::ADDV },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0011'0000'1100'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMAXNMV_HALF_PRECISION },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'0011'0000'1111'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMAXV_HALF_PRECISION },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1011'0000'1100'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMINNMV_HALF_PRECISION },
            { 0b1011'1111'1111'1111'1111'1100'0000'0000, 0b0000'1110'1011'0000'1111'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMINV_HALF_PRECISION },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0011'0000'0011'1000'0000'0000,
              AdvancedSIMDAcrossLanes::UADDLV },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0011'0000'1010'1000'0000'0000,
              AdvancedSIMDAcrossLanes::UMAXV },
            { 0b1011'1111'0011'1111'1111'1100'0000'0000, 0b0010'1110'0011'0001'1010'1000'0000'0000,
              AdvancedSIMDAcrossLanes::UMINV },
            { 0b1011'1111'1011'1111'1111'1100'0000'0000, 0b0010'1110'0011'0000'1100'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMAXNMV_SINGLE_DOUBLE_PRECISION },
            { 0b1011'1111'1011'1111'1111'1100'0000'0000, 0b0010'1110'0011'0000'1111'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMAXV_SINGLE_DOUBLE_PRECISION },
            { 0b1011'1111'1011'1111'1111'1100'0000'0000, 0b0010'1110'1011'0000'1100'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMINNMV_SINGLE_DOUBLE_PRECISION },
            { 0b1011'1111'1011'1111'1111'1100'0000'0000, 0b0010'1110'1011'0000'1111'1000'0000'0000,
              AdvancedSIMDAcrossLanes::FMINV_SINGLE_DOUBLE_PRECISION },
        } } };
    inline static constexpr Table< AdvancedSIMDThreeDifferent, std::underlying_type_t< AdvancedSIMDThreeDifferent >,
                                   enum_size_v< AdvancedSIMDThreeDifferent > >
        AdvancedSIMDThreeDifferentTable { { {
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0000'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SADDL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0001'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SADDW },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0010'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SSUBL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0011'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SSUBW },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0100'0000'0000'0000,
              AdvancedSIMDThreeDifferent::ADDHN },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0101'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SABAL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0110'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SUBHN },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0111'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SABDL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1000'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SMLAL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1001'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SQDMLAL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1010'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SMLSL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1011'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SQDMLSL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1100'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SMULL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1101'0000'0000'0000,
              AdvancedSIMDThreeDifferent::SQDMULL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1110'0000'0000'0000,
              AdvancedSIMDThreeDifferent::PMULL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0000'0000'0000'0000,
              AdvancedSIMDThreeDifferent::UADDL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0001'0000'0000'0000,
              AdvancedSIMDThreeDifferent::UADDW },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0010'0000'0000'0000,
              AdvancedSIMDThreeDifferent::USUBL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0011'0000'0000'0000,
              AdvancedSIMDThreeDifferent::USUBW },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0100'0000'0000'0000,
              AdvancedSIMDThreeDifferent::RADDHN },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0101'0000'0000'0000,
              AdvancedSIMDThreeDifferent::UABAL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0110'0000'0000'0000,
              AdvancedSIMDThreeDifferent::RSUBHN },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0111'0000'0000'0000,
              AdvancedSIMDThreeDifferent::UABDL },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1000'0000'0000'0000,
              AdvancedSIMDThreeDifferent::UMLAL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1010'0000'0000'0000,
              AdvancedSIMDThreeDifferent::UMLSL_VECTOR },
            { 0b1011'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1100'0000'0000'0000,
              AdvancedSIMDThreeDifferent::UMULL_VECTOR },
        } } };
    inline static constexpr Table< AdvancedSIMDThreeSame, std::underlying_type_t< AdvancedSIMDThreeSame >,
                                   enum_size_v< AdvancedSIMDThreeSame > >
        AdvancedSIMDThreeSameTable { { {
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0000'0100'0000'0000,
              AdvancedSIMDThreeSame::SHADD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0000'1100'0000'0000,
              AdvancedSIMDThreeSame::SQADD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0001'0100'0000'0000,
              AdvancedSIMDThreeSame::SRHADD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0010'0100'0000'0000,
              AdvancedSIMDThreeSame::SHSUB },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0010'1100'0000'0000,
              AdvancedSIMDThreeSame::SQSUB },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0011'0100'0000'0000,
              AdvancedSIMDThreeSame::CMGTr },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0011'1100'0000'0000,
              AdvancedSIMDThreeSame::CMGEr },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0100'0100'0000'0000,
              AdvancedSIMDThreeSame::SSHL },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0100'1100'0000'0000,
              AdvancedSIMDThreeSame::SQSHLr },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0101'0100'0000'0000,
              AdvancedSIMDThreeSame::SRSHL },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0101'1100'0000'0000,
              AdvancedSIMDThreeSame::SQRSHL },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0110'0100'0000'0000,
              AdvancedSIMDThreeSame::SMAX },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0110'1100'0000'0000,
              AdvancedSIMDThreeSame::SMIN },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0111'0100'0000'0000,
              AdvancedSIMDThreeSame::SABD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0111'1100'0000'0000,
              AdvancedSIMDThreeSame::SABA },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1000'0100'0000'0000,
              AdvancedSIMDThreeSame::ADD_VECTOR },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1000'1100'0000'0000,
              AdvancedSIMDThreeSame::CMTST },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1001'0100'0000'0000,
              AdvancedSIMDThreeSame::MLA_VECTOR },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1001'1100'0000'0000,
              AdvancedSIMDThreeSame::MUL_VECTOR },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1010'0100'0000'0000,
              AdvancedSIMDThreeSame::SMAXP },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1010'1100'0000'0000,
              AdvancedSIMDThreeSame::SMINP },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1011'0100'0000'0000,
              AdvancedSIMDThreeSame::SQDMULH_VECTOR },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1011'1100'0000'0000,
              AdvancedSIMDThreeSame::ADDP_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1100'0100'0000'0000,
              AdvancedSIMDThreeSame::FMAXNM_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1100'1100'0000'0000,
              AdvancedSIMDThreeSame::FMLA_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1101'0100'0000'0000,
              AdvancedSIMDThreeSame::FADD_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1101'1100'0000'0000,
              AdvancedSIMDThreeSame::FMULX },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1110'0100'0000'0000,
              AdvancedSIMDThreeSame::FCMEQr },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1111'0100'0000'0000,
              AdvancedSIMDThreeSame::FMAX_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1111'1100'0000'0000,
              AdvancedSIMDThreeSame::FRECPS },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::AND_VECTOR },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1110'1100'0000'0000,
              AdvancedSIMDThreeSame::FMLAL },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'0110'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::BICr_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1100'0100'0000'0000,
              AdvancedSIMDThreeSame::FMINNM_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1100'1100'0000'0000,
              AdvancedSIMDThreeSame::FMLS_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1101'0100'0000'0000,
              AdvancedSIMDThreeSame::FSUB_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1111'0100'0000'0000,
              AdvancedSIMDThreeSame::FMIN_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0000'1110'0010'0000'1111'1100'0000'0000,
              AdvancedSIMDThreeSame::FRSQRTS },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1010'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::ORRr_VECTOR },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1010'0000'1110'1100'0000'0000,
              AdvancedSIMDThreeSame::FMLSL },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0000'1110'1110'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::ORN_VECTOR },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0000'0100'0000'0000,
              AdvancedSIMDThreeSame::UHADD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0000'1100'0000'0000,
              AdvancedSIMDThreeSame::UQADD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0001'0100'0000'0000,
              AdvancedSIMDThreeSame::URHADD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0010'0100'0000'0000,
              AdvancedSIMDThreeSame::UHSUB },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0010'1100'0000'0000,
              AdvancedSIMDThreeSame::UQSUB },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0011'0100'0000'0000,
              AdvancedSIMDThreeSame::CMHIr },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0011'1100'0000'0000,
              AdvancedSIMDThreeSame::CMHSr },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0100'0100'0000'0000,
              AdvancedSIMDThreeSame::USHL },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0100'1100'0000'0000,
              AdvancedSIMDThreeSame::UQSHLr },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0101'0100'0000'0000,
              AdvancedSIMDThreeSame::URSHL },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0101'1100'0000'0000,
              AdvancedSIMDThreeSame::UQRSHL },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0110'0100'0000'0000,
              AdvancedSIMDThreeSame::UMAX },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0110'1100'0000'0000,
              AdvancedSIMDThreeSame::UMIN },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0111'0100'0000'0000,
              AdvancedSIMDThreeSame::UABD },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0111'1100'0000'0000,
              AdvancedSIMDThreeSame::UABA },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1000'0100'0000'0000,
              AdvancedSIMDThreeSame::SUB_VECTOR },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1000'1100'0000'0000,
              AdvancedSIMDThreeSame::CMEQr },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1001'0100'0000'0000,
              AdvancedSIMDThreeSame::MLS_VECTOR },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1001'1100'0000'0000,
              AdvancedSIMDThreeSame::PMUL },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1010'0100'0000'0000,
              AdvancedSIMDThreeSame::UMAXP },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1010'1100'0000'0000,
              AdvancedSIMDThreeSame::UMINP },
            { 0b1011'1111'0010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1011'0100'0000'0000,
              AdvancedSIMDThreeSame::SQRDMULH_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1100'0100'0000'0000,
              AdvancedSIMDThreeSame::FMAXNMP_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1101'0100'0000'0000,
              AdvancedSIMDThreeSame::FADDP_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1101'1100'0000'0000,
              AdvancedSIMDThreeSame::FMUL_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1110'0100'0000'0000,
              AdvancedSIMDThreeSame::FCMGEr },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1110'1100'0000'0000,
              AdvancedSIMDThreeSame::FACGE },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1111'0100'0000'0000,
              AdvancedSIMDThreeSame::FMAXP_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1111'1100'0000'0000,
              AdvancedSIMDThreeSame::FDIV_VECTOR },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::EOR_VECTOR },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0010'0000'1100'1100'0000'0000,
              AdvancedSIMDThreeSame::FMLAL2 },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'0110'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::BSL },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'1010'0000'1100'0100'0000'0000,
              AdvancedSIMDThreeSame::FMINNMP_VECTOR },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'1010'0000'1101'0100'0000'0000,
              AdvancedSIMDThreeSame::FABD },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'1010'0000'1110'0100'0000'0000,
              AdvancedSIMDThreeSame::FCMGTr },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'1010'0000'1110'1100'0000'0000,
              AdvancedSIMDThreeSame::FACGT },
            { 0b1010'1111'1010'0000'1111'1100'0000'0000, 0b0010'1110'1010'0000'1111'0100'0000'0000,
              AdvancedSIMDThreeSame::FMINP_VECTOR },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1010'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::BIT },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1010'0000'1100'1100'0000'0000,
              AdvancedSIMDThreeSame::FMLSL2 },
            { 0b1010'1111'1110'0000'1111'1100'0000'0000, 0b0010'1110'1110'0000'0001'1100'0000'0000,
              AdvancedSIMDThreeSame::BIF },
        } } };
    inline static constexpr Table< AdvancedSIMDModifiedImmediate,
                                   std::underlying_type_t< AdvancedSIMDModifiedImmediate >,
                                   enum_size_v< AdvancedSIMDModifiedImmediate > >
        AdvancedSIMDModifiedImmediateTable { { {
            { 0b0010'1111'1111'1000'1001'1100'0000'0000, 0b0000'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MOVIi_32BIT_SHIFTED },
            { 0b0010'1111'1111'1000'1001'1100'0000'0000, 0b0000'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::ORRi_32BIT_VECTOR },
            { 0b0010'1111'1111'1000'1101'1100'0000'0000, 0b0000'1111'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MOVIi_16BIT_SHIFTED },
            { 0b0010'1111'1111'1000'1101'1100'0000'0000, 0b0000'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::ORRi_16BIT_VECTOR },
            { 0b0010'1111'1111'1000'1110'1100'0000'0000, 0b0000'1111'0000'0000'1100'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MOVI_32BIT_SHIFTING_ONES },
            { 0b0010'1111'1111'1000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MOVI_8BIT },
            { 0b0010'1111'1111'1000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1111'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::FMOVi_VECTOR_SINGLE_PRECISION },
            { 0b0010'1111'1111'1000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1111'1100'0000'0000,
              AdvancedSIMDModifiedImmediate::FMOVi_VECTOR_HALF_PRECISION },
            { 0b0010'1111'1111'1000'1001'1100'0000'0000, 0b0010'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MVNIi_32BIT_SHIFTED },
            { 0b0010'1111'1111'1000'1001'1100'0000'0000, 0b0010'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::BICi_32BIT_VECTOR },
            { 0b0010'1111'1111'1000'1101'1100'0000'0000, 0b0010'1111'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MVNIi_16BIT_SHIFTED },
            { 0b0010'1111'1111'1000'1101'1100'0000'0000, 0b0010'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::BICi_16BIT_VECTOR },
            { 0b0010'1111'1111'1000'1110'1100'0000'0000, 0b0010'1111'0000'0000'1100'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MVNI_32BIT_SHIFTING_ONES },
            { 0b0110'1111'1111'1000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MOVI_64BIT_SCALAR },
            { 0b0110'1111'1111'1000'1111'1100'0000'0000, 0b0110'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::MOVI_64BIT_VECTOR },
            { 0b0110'1111'1111'1000'1111'1100'0000'0000, 0b0110'1111'0000'0000'1111'0100'0000'0000,
              AdvancedSIMDModifiedImmediate::FMOVi_VECTOR_DOUBLE_PRECISION },
        } } };
    inline static constexpr Table< AdvancedSIMDShiftByImmediate, std::underlying_type_t< AdvancedSIMDShiftByImmediate >,
                                   enum_size_v< AdvancedSIMDShiftByImmediate > + 1 >
        AdvancedSIMDShiftByImmediateTable { { {
            { 0b0001'1111'1111'1000'0000'0100'0000'0000, 0b0000'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::Undefined },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SSHR },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SSRA },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'0010'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SRSHR },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'0011'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SRSRA },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'0101'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SHL },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'0111'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SQSHLi },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SHRN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1000'1100'0000'0000,
              AdvancedSIMDShiftByImmediate::RSHRN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SQSHRN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1001'1100'0000'0000,
              AdvancedSIMDShiftByImmediate::SQRSHRN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1010'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SSHLL },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SCVTF_VECTOR_FIXED_POINT },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0000'1111'0000'0000'1111'1100'0000'0000,
              AdvancedSIMDShiftByImmediate::FCVTZS_VECTOR_FIXED_POINT },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0000'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::USHR },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0001'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::USRA },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0010'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::URSHR },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0011'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::URSRA },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0100'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SRI },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0101'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SLI },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0110'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SQSHLU },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'0111'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::UQSHLi },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1000'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::SQSHRUN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1000'1100'0000'0000,
              AdvancedSIMDShiftByImmediate::SQRSHRUN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1001'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::UQSHRN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1001'1100'0000'0000,
              AdvancedSIMDShiftByImmediate::UQRSHRN },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1010'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::USHLL },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1110'0100'0000'0000,
              AdvancedSIMDShiftByImmediate::UCVTF_VECTOR_FIXED_POINT },
            { 0b1011'1111'1000'0000'1111'1100'0000'0000, 0b0010'1111'0000'0000'1111'1100'0000'0000,
              AdvancedSIMDShiftByImmediate::FCVTZU_VECTOR_FIXED_POINT },
        } } };
    inline static constexpr Table< AdvancedSIMDVectorXIndexedElement,
                                   std::underlying_type_t< AdvancedSIMDVectorXIndexedElement >,
                                   enum_size_v< AdvancedSIMDVectorXIndexedElement > + 1 >
        AdvancedSIMDVectorXIndexedElementTable { { {
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'0010'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SMLAL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'0011'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SQDMLAL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'0110'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SMLSL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'0111'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SQDMLSL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'1000'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::MUL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'1010'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SMULL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'1011'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SQDMULL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'1100'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SQDMULH_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'1101'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SQRDMULH_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0000'1111'0000'0000'1110'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SDOT_ELEMENT },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'0000'0000'0001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLA_ELEMENT_VECTOR_HALF_PRECISION },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'0000'0000'0101'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLS_ELEMENT_VECTOR_HALF_PRECISION },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'0000'0000'1001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMUL_ELEMENT_VECTOR_HALF_PRECISION },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'0000'0000'1111'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SUDOT_ELEMENT },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'0100'0000'1111'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::BFDOT_ELEMENT },
            { 0b1011'1111'1000'0000'0000'0100'0000'0000, 0b0000'1111'1000'0000'0001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLA_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION },
            { 0b1011'1111'1000'0000'0000'0100'0000'0000, 0b0000'1111'1000'0000'0101'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLS_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION },
            { 0b1011'1111'1000'0000'0000'0100'0000'0000, 0b0000'1111'1000'0000'1001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMUL_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'1000'0000'0000'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLAL },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'1000'0000'0100'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLSL },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'1000'0000'1111'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::USDOT_ELEMENT },
            { 0b1011'1111'1100'0000'0000'0100'0000'0000, 0b0000'1111'1100'0000'1111'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::BFMLALB_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'0000'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::MLA_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'0010'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::UMLAL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'0100'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::MLS_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'0110'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::UMLSL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'1010'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::UMULL_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'1101'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SQRDMLAH_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'1110'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::UDOT_ELEMENT },
            { 0b1011'1111'0000'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'1111'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::SQRDMLSH_ELEMENT },
            { 0b1011'1111'1100'0000'1111'0100'0000'0000, 0b0010'1111'0000'0000'1001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMULX_ELEMENT_VECTOR_HALF_PRECISION },
            { 0b1011'1111'1100'0000'1001'0100'0000'0000, 0b0010'1111'0100'0000'0001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FCMLA_ELEMENT },
            { 0b1011'1111'1000'0000'1111'0100'0000'0000, 0b0010'1111'1000'0000'1001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMULX_ELEMENT_VECTOR_SINGLE_DOUBLE_PRECISION },
            { 0b1011'1111'1100'0000'1001'0100'0000'0000, 0b0010'1111'1000'0000'0001'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FCMLA_ELEMENT },
            { 0b1011'1111'1100'0000'1111'0100'0000'0000, 0b0010'1111'1000'0000'1000'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLAL2 },
            { 0b1011'1111'1100'0000'1111'0100'0000'0000, 0b0010'1111'1000'0000'1100'0000'0000'0000,
              AdvancedSIMDVectorXIndexedElement::FMLSL2 },
        } } };
    inline static constexpr Table< CryptographicThreeRegisterIMM2,
                                   std::underlying_type_t< CryptographicThreeRegisterIMM2 >,
                                   enum_size_v< CryptographicThreeRegisterIMM2 > >
        CryptographicThreeRegisterIMM2Table { { {
            { 0b1111'1111'1110'0000'1100'1100'0000'0000, 0b1100'1110'0100'0000'1000'0000'0000'0000,
              CryptographicThreeRegisterIMM2::SM3TT1A },
            { 0b1111'1111'1110'0000'1100'1100'0000'0000, 0b1100'1110'0100'0000'1000'0100'0000'0000,
              CryptographicThreeRegisterIMM2::SM3TT1B },
            { 0b1111'1111'1110'0000'1100'1100'0000'0000, 0b1100'1110'0100'0000'1000'1000'0000'0000,
              CryptographicThreeRegisterIMM2::SM3TT2A },
            { 0b1111'1111'1110'0000'1100'1100'0000'0000, 0b1100'1110'0100'0000'1000'1100'0000'0000,
              CryptographicThreeRegisterIMM2::SM3TT2B },
        } } };
    inline static constexpr Table< CryptographicThreeRegisterSHA512,
                                   std::underlying_type_t< CryptographicThreeRegisterSHA512 >,
                                   enum_size_v< CryptographicThreeRegisterSHA512 > >
        CryptographicThreeRegisterSHA512Table { { {
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b1100'1110'0110'0000'1000'0000'0000'0000,
              CryptographicThreeRegisterSHA512::SHA512H },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b1100'1110'0110'0000'1000'0100'0000'0000,
              CryptographicThreeRegisterSHA512::SHA512H2 },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b1100'1110'0110'0000'1000'1000'0000'0000,
              CryptographicThreeRegisterSHA512::SHA512SU1 },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b1100'1110'0110'0000'1000'1100'0000'0000,
              CryptographicThreeRegisterSHA512::RAX1 },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b1100'1110'0110'0000'1100'0000'0000'0000,
              CryptographicThreeRegisterSHA512::SM3PARTW1 },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b1100'1110'0110'0000'1100'0100'0000'0000,
              CryptographicThreeRegisterSHA512::SM3PARTW2 },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b1100'1110'0110'0000'1100'1000'0000'0000,
              CryptographicThreeRegisterSHA512::SM4EKEY },
        } } };
    inline static constexpr Table< CryptographicFourRegister, std::underlying_type_t< CryptographicFourRegister >,
                                   enum_size_v< CryptographicFourRegister > >
        CryptographicFourRegisterTable { { {
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b1100'1110'0000'0000'0000'0000'0000'0000,
              CryptographicFourRegister::EOR3 },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b1100'1110'0010'0000'0000'0000'0000'0000,
              CryptographicFourRegister::BCAX },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b1100'1110'0100'0000'0000'0000'0000'0000,
              CryptographicFourRegister::SM3SS1 },
        } } };
    inline static constexpr Table< XAR, std::underlying_type_t< XAR >, enum_size_v< XAR > > XARTable { { {

    } } };
    inline static constexpr Table< CryptographicTwoRegisterSHA512,
                                   std::underlying_type_t< CryptographicTwoRegisterSHA512 >,
                                   enum_size_v< CryptographicTwoRegisterSHA512 > >
        CryptographicTwoRegisterSHA512Table { { {
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1100'1110'1100'0000'1000'0000'0000'0000,
              CryptographicTwoRegisterSHA512::SHA512SU0 },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1100'1110'1100'0000'1000'0100'0000'0000,
              CryptographicTwoRegisterSHA512::SM4E },
        } } };
    inline static constexpr Table< ConversionFloatingPointAndFixedPoint,
                                   std::underlying_type_t< ConversionFloatingPointAndFixedPoint >,
                                   enum_size_v< ConversionFloatingPointAndFixedPoint > >
        ConversionFloatingPointAndFixedPointTable { { {
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0000'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::SCVTF_SCALAR_FIXED_POINT_32BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0000'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::UCVTF_SCALAR_FIXED_POINT_32BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0001'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZS_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0001'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZU_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0100'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::SCVTF_SCALAR_FIXED_POINT_32BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0100'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::UCVTF_SCALAR_FIXED_POINT_32BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0101'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZS_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'0101'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZU_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'1100'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::SCVTF_SCALAR_FIXED_POINT_32BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'1100'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::UCVTF_SCALAR_FIXED_POINT_32BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'1101'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZS_SCALAR_FIXED_POINT_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b0001'1110'1101'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZU_SCALAR_FIXED_POINT_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0000'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::SCVTF_SCALAR_FIXED_POINT_64BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0000'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::UCVTF_SCALAR_FIXED_POINT_64BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0001'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZS_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0001'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZU_SCALAR_FIXED_POINT_SINGLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0100'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::SCVTF_SCALAR_FIXED_POINT_64BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0100'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::UCVTF_SCALAR_FIXED_POINT_64BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0101'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZS_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'0101'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZU_SCALAR_FIXED_POINT_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'1100'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::SCVTF_SCALAR_FIXED_POINT_64BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'1100'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::UCVTF_SCALAR_FIXED_POINT_64BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'1101'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZS_SCALAR_FIXED_POINT_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'0000'0000'0000'0000, 0b1001'1110'1101'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndFixedPoint::FCVTZU_SCALAR_FIXED_POINT_HALF_PRECISION_TO_64BIT },
        } } };
    inline static constexpr Table< ConversionFloatingPointAndInteger,
                                   std::underlying_type_t< ConversionFloatingPointAndInteger >,
                                   enum_size_v< ConversionFloatingPointAndInteger > >
        ConversionFloatingPointAndIntegerTable { { {
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNS_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNU_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::SCVTF_SCALAR_INTEGER_32BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::UCVTF_SCALAR_INTEGER_32BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0100'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAS_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0101'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAU_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0110'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0111'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_32BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPS_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPU_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0011'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMS_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0011'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMU_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0011'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZS_SCALAR_INTEGER_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0011'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZU_SCALAR_INTEGER_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNS_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNU_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::SCVTF_SCALAR_INTEGER_32BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::UCVTF_SCALAR_INTEGER_32BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0100'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAS_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0101'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAU_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPS_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPU_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0111'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMS_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0111'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMU_SCALAR_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0111'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZS_SCALAR_INTEGER_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0111'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZU_SCALAR_INTEGER_DOUBLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0111'1110'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FJCVTZS },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNS_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNU_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::SCVTF_SCALAR_INTEGER_32BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::UCVTF_SCALAR_INTEGER_32BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0100'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAS_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0101'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAU_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0110'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0111'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_32BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPS_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPU_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1111'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMS_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1111'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMU_SCALAR_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1111'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZS_SCALAR_INTEGER_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1111'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZU_SCALAR_INTEGER_HALF_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNS_SCALAR_SINGLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNU_SCALAR_SINGLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::SCVTF_SCALAR_INTEGER_64BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::UCVTF_SCALAR_INTEGER_64BIT_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'0100'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAS_SCALAR_SINGLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'0101'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAU_SCALAR_SINGLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPS_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0010'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPU_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0011'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMS_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0011'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMU_SCALAR_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0011'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZS_SCALAR_INTEGER_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0011'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZU_SCALAR_INTEGER_SINGLE_PRECISION_TO_32BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNS_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNU_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::SCVTF_SCALAR_INTEGER_64BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::UCVTF_SCALAR_INTEGER_64BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0100'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAS_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0101'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAU_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0110'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'0111'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_64BIT_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPS_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0110'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPU_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0111'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMS_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0111'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMU_SCALAR_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0111'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZS_SCALAR_INTEGER_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'0111'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZU_SCALAR_INTEGER_DOUBLE_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1010'1110'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_TOP_HALF_128BIT_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1010'1111'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_64BIT_TO_TOP_HALF_128BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNS_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTNU_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0010'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::SCVTF_SCALAR_INTEGER_64BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0011'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::UCVTF_SCALAR_INTEGER_64BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0100'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAS_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0101'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTAU_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0110'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'0111'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FMOV_GENERAL_64BIT_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPS_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1110'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTPU_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1111'0000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMS_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1111'0001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTMU_SCALAR_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1111'1000'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZS_SCALAR_INTEGER_HALF_PRECISION_TO_64BIT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b1001'1110'1111'1001'0000'0000'0000'0000,
              ConversionFloatingPointAndInteger::FCVTZU_SCALAR_INTEGER_HALF_PRECISION_TO_64BIT },
        } } };
    inline static constexpr Table< FloatingPointDataProcessingOneSource,
                                   std::underlying_type_t< FloatingPointDataProcessingOneSource >,
                                   enum_size_v< FloatingPointDataProcessingOneSource > >
        FloatingPointDataProcessingOneSourceTable { { {
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0000'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FMOVr_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0000'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FABS_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0001'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FNEG_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0001'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FSQRT_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0010'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FCVT_SINGLE_PRECISION_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0011'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FCVT_SINGLE_PRECISION_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0100'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTN_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0100'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTP_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0101'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTM_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0101'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTZ_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0110'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTA_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0111'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTX_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'0111'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTI_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'1000'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT32Z_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'1000'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT32X_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'1001'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT64Z_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0010'1001'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT64X_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0000'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FMOVr_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0000'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FABS_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0001'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FNEG_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0001'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FSQRT_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0010'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FCVT_DOUBLE_PRECISION_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0011'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::BFCVT },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0011'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FCVT_DOUBLE_PRECISION_TO_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0100'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTN_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0100'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTP_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0101'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTM_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0101'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTZ_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0110'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTA_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0111'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTX_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'0111'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTI_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'1000'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT32Z_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'1000'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT32X_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'1001'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT64Z_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'0110'1001'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINT64X_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0000'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FMOVr_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0000'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FABS_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0001'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FNEG_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0001'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FSQRT_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0010'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FCVT_HALF_PRECISION_TO_SINGLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0010'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FCVT_HALF_PRECISION_TO_DOUBLE_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0100'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTN_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0100'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTP_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0101'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTM_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0101'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTZ_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0110'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTA_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0111'0100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTX_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1111'1111'1111'1100'0000'0000, 0b0001'1110'1110'0111'1100'0000'0000'0000,
              FloatingPointDataProcessingOneSource::FRINTI_SCALAR_HALF_PRECISION },
        } } };
    inline static constexpr Table< FloatingPointCompare, std::underlying_type_t< FloatingPointCompare >,
                                   enum_size_v< FloatingPointCompare > * 6 >
        FloatingPointCompareTable { { {
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0010'0000'0010'0000'0000'0000,
              FloatingPointCompare::FCMP },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0010'0000'0010'0000'0000'1000,
              FloatingPointCompare::FCMP },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0010'0000'0010'0000'0001'0000,
              FloatingPointCompare::FCMPE },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0010'0000'0010'0000'0001'1000,
              FloatingPointCompare::FCMPE },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0110'0000'0010'0000'0000'0000,
              FloatingPointCompare::FCMP },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0110'0000'0010'0000'0000'1000,
              FloatingPointCompare::FCMP },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0110'0000'0010'0000'0001'0000,
              FloatingPointCompare::FCMPE },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'0110'0000'0010'0000'0001'1000,
              FloatingPointCompare::FCMPE },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'1110'0000'0010'0000'0000'0000,
              FloatingPointCompare::FCMP },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'1110'0000'0010'0000'0000'1000,
              FloatingPointCompare::FCMP },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'1110'0000'0010'0000'0001'0000,
              FloatingPointCompare::FCMPE },
            { 0b1111'1111'1110'0000'1111'1100'0001'1111, 0b0001'1110'1110'0000'0010'0000'0001'1000,
              FloatingPointCompare::FCMPE },
        } } };
    inline static constexpr Table< FloatingPointImmediate, std::underlying_type_t< FloatingPointImmediate >,
                                   enum_size_v< FloatingPointImmediate > >
        FloatingPointImmediateTable { { {
            { 0b1111'1111'1110'0000'0001'1111'1110'0000, 0b0001'1110'0010'0000'0001'0000'0000'0000,
              FloatingPointImmediate::FMOVi_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'0001'1111'1110'0000, 0b0001'1110'0110'0000'0001'0000'0000'0000,
              FloatingPointImmediate::FMOVi_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'0001'1111'1110'0000, 0b0001'1110'1110'0000'0001'0000'0000'0000,
              FloatingPointImmediate::FMOVi_SCALAR_HALF_PRECISION },
        } } };
    inline static constexpr Table< FloatingPointConditionalCompare,
                                   std::underlying_type_t< FloatingPointConditionalCompare >,
                                   enum_size_v< FloatingPointConditionalCompare > >
        FloatingPointConditionalCompareTable { { {
            { 0b1111'1111'1110'0000'0000'1100'0001'0000, 0b0001'1110'0010'0000'0000'0100'0000'0000,
              FloatingPointConditionalCompare::FCCMP_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'0000'1100'0001'0000, 0b0001'1110'0010'0000'0000'0100'0001'0000,
              FloatingPointConditionalCompare::FCCMPE_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'0000'1100'0001'0000, 0b0001'1110'0110'0000'0000'0100'0000'0000,
              FloatingPointConditionalCompare::FCCMP_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'0000'1100'0001'0000, 0b0001'1110'0110'0000'0000'0100'0001'0000,
              FloatingPointConditionalCompare::FCCMPE_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'0000'1100'0001'0000, 0b0001'1110'1110'0000'0000'0100'0000'0000,
              FloatingPointConditionalCompare::FCCMP_HALF_PRECISION },
            { 0b1111'1111'1110'0000'0000'1100'0001'0000, 0b0001'1110'1110'0000'0000'0100'0001'0000,
              FloatingPointConditionalCompare::FCCMPE_HALF_PRECISION },
        } } };
    inline static constexpr Table< FloatingPointDataProcessingTwoSource,
                                   std::underlying_type_t< FloatingPointDataProcessingTwoSource >,
                                   enum_size_v< FloatingPointDataProcessingTwoSource > >
        FloatingPointDataProcessingTwoSourceTable { { {
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0000'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMUL_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0001'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FDIV_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0010'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FADD_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0011'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FSUB_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0100'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMAX_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0101'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMIN_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0110'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMAXNM_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'0111'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMINNM_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0010'0000'1000'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FNMUL_SCALAR_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0000'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMUL_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0001'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FDIV_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0010'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FADD_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0011'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FSUB_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0100'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMAX_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0101'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMIN_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0110'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMAXNM_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'0111'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMINNM_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'0110'0000'1000'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FNMUL_SCALAR_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0000'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMUL_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0001'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FDIV_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0010'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FADD_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0011'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FSUB_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0100'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMAX_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0101'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMIN_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0110'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMAXNM_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'0111'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FMINNM_SCALAR_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1111'1100'0000'0000, 0b0001'1110'1110'0000'1000'1000'0000'0000,
              FloatingPointDataProcessingTwoSource::FNMUL_SCALAR_HALF_PRECISION },
        } } };
    inline static constexpr Table< FloatingPointConditionalSelect,
                                   std::underlying_type_t< FloatingPointConditionalSelect >,
                                   enum_size_v< FloatingPointConditionalSelect > >
        FloatingPointConditionalSelectTable { { {
            { 0b1111'1111'1110'0000'0000'1100'0000'0000, 0b0001'1110'0010'0000'0000'1100'0000'0000,
              FloatingPointConditionalSelect::FCSEL_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'0000'1100'0000'0000, 0b0001'1110'0110'0000'0000'1100'0000'0000,
              FloatingPointConditionalSelect::FCSEL_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'0000'1100'0000'0000, 0b0001'1110'1110'0000'0000'1100'0000'0000,
              FloatingPointConditionalSelect::FCSEL_HALF_PRECISION },
        } } };
    inline static constexpr Table< FloatingPointDataProcessingThreeSource,
                                   std::underlying_type_t< FloatingPointDataProcessingThreeSource >,
                                   enum_size_v< FloatingPointDataProcessingThreeSource > >
        FloatingPointDataProcessingThreeSourceTable { { {
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0000'0000'0000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FMADD_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0000'0000'1000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FMSUB_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0010'0000'0000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FNMADD_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0010'0000'1000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FNMSUB_SINGLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0100'0000'0000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FMADD_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0100'0000'1000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FMSUB_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0110'0000'0000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FNMADD_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'0110'0000'1000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FNMSUB_DOUBLE_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'1100'0000'0000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FMADD_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'1100'0000'1000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FMSUB_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'1110'0000'0000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FNMADD_HALF_PRECISION },
            { 0b1111'1111'1110'0000'1000'0000'0000'0000, 0b0001'1111'1110'0000'1000'0000'0000'0000,
              FloatingPointDataProcessingThreeSource::FNMSUB_HALF_PRECISION },
        } } };

    template < A64DataProcessingScalarFloatingPointAdvancedSIMDGroup InstructionClass >
    [[nodiscard]] auto GetInstructionClassTableInternal() const noexcept {
        if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_AES) {
            return CryptographicAESTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOHRAPHIC_THREE_REGISTER_SHA) {
            return CryptographicThreeRegisterSHATable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_TWO_REGISTER_SHA) {
            return CryptographicTwoRegisterSHATable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_COPY) {
            return AdvancedSIMDScalarCopyTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMG_SCALAR_THREE_SAME_FP16) {
            return AdvancedSIMDScalarThreeSameFP16Table;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_SCALAR_TWO_REGISTER_MISCELLANEOUS_FP16) {
            return AdvancedSIMDScalarTwoRegisterMiscellaneousFP16Table;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_SCALAR_THREE_SAME_EXTRACTION) {
            return AdvancedSIMDScalarThreeSameExtractionTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_SCALAR_TWO_REGISTER_MISCELLANEOUS) {
            return AdvancedSIMDScalarTwoRegisterMiscellaneousTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_PAIRWISE) {
            return AdvancedSIMDScalarPairwiseTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_SCALAR_THREE_DIFFERENT) {
            return AdvancedSIMDScalarThreeDifferentTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SCALAR_THREE_SAME) {
            return AdvancedSIMDScalarThreeSameTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_SCALAR_SHIFT_BY_IMMEDIATE) {
            return AdvancedSIMDScalarShiftByImmediateTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_SCALAR_X_INDEXED_ELEMENT) {
            return AdvancedSIMDScalarXIndexedElementTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_TABLE_LOOKUP) {
            return AdvancedSIMDTableLookupTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_PERMUTE) {
            return AdvancedSIMDPermuteTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_EXTRACT) {
            return AdvancedSIMDExtractTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_COPY) {
            return AdvancedSIMDCopyTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_THREE_SAME_FP16) {
            return AdvancedSIMDThreeSameFP16Table;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_TWO_REGISTER_MISCELLANEOUS_FP16) {
            return AdvancedSIMDTwoRegisterMiscellaneousFP16Table;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_THREE_REGISTER_EXTENSION) {
            return AdvancedSIMDThreeRegisterExtensionTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_TWO_REGISTER_MISCELLANEOUS) {
            return AdvancedSIMDTwoRegisterMiscellaneousTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_ACROSS_LANES) {
            return AdvancedSIMDAcrossLanesTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_THREE_DIFFERENT) {
            return AdvancedSIMDThreeDifferentTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_THREE_SAME) {
            return AdvancedSIMDThreeSameTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_MODIFIED_IMMEDIATE) {
            return AdvancedSIMDModifiedImmediateTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::ADVANCED_SIMD_SHIFT_BY_IMMEDIATE) {
            return AdvancedSIMDShiftByImmediateTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     ADVANCED_SIMD_VECTOR_X_INDEXED_ELEMENT) {
            return AdvancedSIMDVectorXIndexedElementTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_THREE_REGISTER_IMM2) {
            return CryptographicThreeRegisterIMM2Table;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     CRYPTOGRAPHIC_THREE_REGISTER_SHA512) {
            return CryptographicThreeRegisterSHA512Table;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_FOUR_REGISTER) {
            return CryptographicFourRegisterTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::XAR) {
            return XARTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::CRYPTOGRAPHIC_TWO_REGISTER_SHA512) {
            return CryptographicTwoRegisterSHA512Table;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     CONVERSION_FLOATING_POINT_AND_FIXED_POINT) {
            return ConversionFloatingPointAndFixedPointTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     CONVERSION_FLOATING_POINT_AND_INTEGER) {
            return ConversionFloatingPointAndIntegerTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     FLOATING_POINT_DATA_PROCESSING_ONE_SOURCE) {
            return FloatingPointDataProcessingOneSourceTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_COMPARE) {
            return FloatingPointCompareTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_IMMEDIATE) {
            return FloatingPointImmediateTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     FLOATING_POINT_CONDITIONAL_COMPARE) {
            return FloatingPointConditionalCompareTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     FLOATING_POINT_DATA_PROCESSING_TWO_SOURCE) {
            return FloatingPointDataProcessingTwoSourceTable;
        } else if constexpr (InstructionClass ==
                             A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::FLOATING_POINT_CONDITIONAL_SELECT) {
            return FloatingPointConditionalSelectTable;
        } else if constexpr (InstructionClass == A64DataProcessingScalarFloatingPointAdvancedSIMDGroup::
                                                     FLOATING_POINT_DATA_PROCESSING_THREE_SOURCE) {
            return FloatingPointDataProcessingThreeSourceTable;
        } else {
            throw ARM_EMU_EXCEPTION; // Compile time error detection
        }
    }

    [[nodiscard]] A64DataProcessingScalarFloatingPointAdvancedSIMDGroup
        GetInstructionClassInternal(const Instruction& instruction) const noexcept final {
        return A64DataProcessingScalarFloatingPointAdvancedSIMDGroupTable.Lookup(instruction.Get());
    }

  public:
    template < InstructionGroup InstructionClass >
    [[nodiscard]] auto GetInstructionType(const Instruction& instruction) const noexcept {
        const auto& mTable = GetInstructionClassTableInternal< InstructionClass >();
        return mTable.Lookup(instruction.Get());
    }
};

END_NAMESPACE

#endif // !defined(DATAPROCESSINGSCALARFLOATINGPOINTADVANCESSIMD_H_INCLUDED_DDB3C45D_0CAF_4D56_83E9_1B30C58D4A3B)
